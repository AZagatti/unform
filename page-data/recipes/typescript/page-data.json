{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/recipes/typescript/","result":{"data":{"mdx":{"id":"8d1fe514-f7d6-5f53-8ff5-9518d7f9973e","excerpt":"Usage with TypeScript Unform exposes all type definitions from within it's packages, so it's not necessary to install  @types  dependencies. Form withâ€¦","fields":{"slug":"/recipes/typescript/"},"frontmatter":{"title":"","description":null,"image":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"usage-with-typescript\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"#usage-with-typescript\",\n    \"aria-label\": \"usage with typescript permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Usage with TypeScript\"), mdx(\"p\", null, \"Unform exposes all type definitions from within it's packages, so it's not necessary to install \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@types\"), \" dependencies.\"), mdx(\"h2\", {\n    \"id\": \"form-with-typescript\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#form-with-typescript\",\n    \"aria-label\": \"form with typescript permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Form with TypeScript\"), mdx(\"p\", null, \"When creating a form component using Unform and TypeScript, there are two main points to remember:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onSubmit\"), \" function can be typed using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SubmitHandler<FormData>\"), \" where \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FormData\"), \" is the format of data inputted by user;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If you're using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"useRef\"), \" to access form reference, remember to add \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FormHandles\"), \" as type parameter to it;\")), mdx(\"br\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"import React, { useRef } from 'react';\\nimport { SubmitHandler, FormHandles } from '@unform/core';\\nimport { Form } from '@unform/web';\\nimport Input from './components/Input';\\n\\ninterface FormData {\\n  name: string;\\n  email: string;\\n};\\n\\nconst MyForm: React.FC = () => {\\n  const formRef = useRef<FormHandles>(null);\\n\\n  const handleSubmit: SubmitHandler<FormData> = (data) => {\\n    console.log(formRef);\\n  };\\n\\n  return (\\n    <Form ref={formRef} onSubmit={handleSubmit}>\\n      <Input name=\\\"name\\\" />\\n      <Input name=\\\"email\\\" />\\n    </Form>\\n  )\\n};\\n\\nexport default MyForm;\\n\")), mdx(\"h2\", {\n    \"id\": \"simple-input\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#simple-input\",\n    \"aria-label\": \"simple input permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Simple input\"), mdx(\"p\", null, \"When creating a simple HTML input or any other HTML element used for input source, remember to always extend the element props. In web you can always use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JSX.IntrinsicElements['element']\"), \" to get the props adapted to JSX.\"), mdx(\"blockquote\", null, mdx(\"p\", null, \"In React Native you can import default component props directly from `react-native` package, for exaple:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import { TextInputProps } from 'react-native'`\\n\"))), mdx(\"p\", null, \"Also, in web (ReactJS) rembember to reference the global element inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useRef\"), \" hook and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"always\"), \" set the default value to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"import React, { useEffect, useRef } from 'react';\\nimport { useField } from '@unform/core';\\n\\nimport { Container } from './styles';\\n\\ninterface Props {\\n  name: string;\\n  label?: string;\\n};\\n\\ntype InputProps = JSX.IntrinsicElements['input'] & Props;\\n\\nconst Input: React.FC<InputProps> = ({ name, label, ...rest }) => {\\n  const inputRef = useRef<HTMLInputElement>(null);\\n\\n  const { fieldName, defaultValue, registerField, error } = useField(name);\\n\\n  useEffect(() => {\\n    registerField({\\n      name: fieldName,\\n      path: 'value',\\n      ref: inputRef.current,\\n    })\\n  }, [fieldName, registerField]);\\n\\n  return (\\n    <>\\n      { label && <label htmlFor={fieldName}>{label}</label> }\\n\\n      <input\\n        id={fieldName}\\n        ref={inputRef}\\n        defaultValue={defaultValue}\\n        {...rest}\\n      />\\n\\n      { error && <span>{error}</span> }\\n    </>\\n  );\\n};\\n\\nexport default Input;\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/recipes/typescript/","prev":{"id":"6168f36c-cb4f-5777-9925-629e3094f88f","fields":{"slug":"/guides/basic-form/"},"frontmatter":{"title":""}},"next":{"id":"437da1c5-c37e-5108-9895-2866e1c515be","fields":{"slug":"/recipes/styled-components/"},"frontmatter":{"title":""}}}}}