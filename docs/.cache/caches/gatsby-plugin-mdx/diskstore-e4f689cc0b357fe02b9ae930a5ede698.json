{"expireTime":9007200835732668000,"key":"gatsby-plugin-mdx-entire-payload-0355a83ab327411132a7b10eb1066223-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"React Simple Code Editor","position":{"start":{"line":1,"column":3,"offset":2},"end":{"line":1,"column":27,"offset":26},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":27,"offset":26},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"http://satya164.xyz/react-simple-code-editor/","children":[{"type":"text","value":"React Simple Code Editor","position":{"start":{"line":3,"column":2,"offset":29},"end":{"line":3,"column":26,"offset":53},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":28},"end":{"line":3,"column":74,"offset":101},"indent":[]}},{"type":"text","value":" is a cool library focused on providing a simple way to add a code input source to user.","position":{"start":{"line":3,"column":74,"offset":101},"end":{"line":3,"column":162,"offset":189},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":28},"end":{"line":3,"column":162,"offset":189},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"⚠️ All examples below are using ","position":{"start":{"line":5,"column":3,"offset":193},"end":{"line":5,"column":35,"offset":225},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"TypeScript","position":{"start":{"line":5,"column":37,"offset":227},"end":{"line":5,"column":47,"offset":237},"indent":[]}}],"position":{"start":{"line":5,"column":35,"offset":225},"end":{"line":5,"column":49,"offset":239},"indent":[]}},{"type":"text","value":", if you're not using it you can simply remove all type definitions as the ","position":{"start":{"line":5,"column":49,"offset":239},"end":{"line":5,"column":124,"offset":314},"indent":[]}},{"type":"inlineCode","value":"React.FC<Props>","position":{"start":{"line":5,"column":124,"offset":314},"end":{"line":5,"column":141,"offset":331},"indent":[]}},{"type":"text","value":" from component definition.","position":{"start":{"line":5,"column":141,"offset":331},"end":{"line":5,"column":168,"offset":358},"indent":[]}}],"position":{"start":{"line":5,"column":3,"offset":193},"end":{"line":5,"column":168,"offset":358},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":191},"end":{"line":5,"column":168,"offset":358},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Syntax Highlight","position":{"start":{"line":7,"column":4,"offset":363},"end":{"line":7,"column":20,"offset":379},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":360},"end":{"line":7,"column":20,"offset":379},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"React Simple Code Editor use PrismJS to add syntax highlighting to code.","position":{"start":{"line":9,"column":1,"offset":381},"end":{"line":9,"column":73,"offset":453},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":381},"end":{"line":9,"column":73,"offset":453},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You need to import each ","position":{"start":{"line":11,"column":1,"offset":455},"end":{"line":11,"column":25,"offset":479},"indent":[]}},{"type":"link","title":null,"url":"https://prismjs.com/#supported-languages","children":[{"type":"text","value":"language","position":{"start":{"line":11,"column":26,"offset":480},"end":{"line":11,"column":34,"offset":488},"indent":[]}}],"position":{"start":{"line":11,"column":25,"offset":479},"end":{"line":11,"column":77,"offset":531},"indent":[]}},{"type":"text","value":" that you want to use from ","position":{"start":{"line":11,"column":77,"offset":531},"end":{"line":11,"column":104,"offset":558},"indent":[]}},{"type":"inlineCode","value":"prismjs/components/prism-{language}","position":{"start":{"line":11,"column":104,"offset":558},"end":{"line":11,"column":141,"offset":595},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":11,"column":141,"offset":595},"end":{"line":11,"column":142,"offset":596},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":455},"end":{"line":11,"column":142,"offset":596},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can also import custom themes from ","position":{"start":{"line":13,"column":1,"offset":598},"end":{"line":13,"column":40,"offset":637},"indent":[]}},{"type":"inlineCode","value":"prismjs/themes/prism-{theme}.css","position":{"start":{"line":13,"column":40,"offset":637},"end":{"line":13,"column":74,"offset":671},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":13,"column":74,"offset":671},"end":{"line":13,"column":75,"offset":672},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":598},"end":{"line":13,"column":75,"offset":672},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example","position":{"start":{"line":15,"column":4,"offset":677},"end":{"line":15,"column":11,"offset":684},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":674},"end":{"line":15,"column":11,"offset":684},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Below you can see an example using only HTML/CSS syntax highlighting and using ","position":{"start":{"line":17,"column":1,"offset":686},"end":{"line":17,"column":80,"offset":765},"indent":[]}},{"type":"inlineCode","value":"prism-dark","position":{"start":{"line":17,"column":80,"offset":765},"end":{"line":17,"column":92,"offset":777},"indent":[]}},{"type":"text","value":" theme.","position":{"start":{"line":17,"column":92,"offset":777},"end":{"line":17,"column":99,"offset":784},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":686},"end":{"line":17,"column":99,"offset":784},"indent":[]}},{"type":"code","lang":"jsx","meta":"lineNumbers=true","value":"import React, { useRef, useState, useEffect } from 'react';\nimport Editor from 'react-simple-code-editor';\nimport { useField } from '@unform/core'\n\nimport { highlight, languages } from 'prismjs';\n\nimport 'prismjs/components/prism-markup';\nimport 'prismjs/components/prism-css';\nimport 'prismjs/themes/prism-dark.css';\n\ninterface Props {\n  name: string;\n};\n\nconst CodeInput: React.FC<Props> = ({ name }) => {\n  const [code, setCode] = useState('');\n  const editorRef = useRef(null);\n\n  const { defaultValue, fieldName, registerField, error } = useField(name);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: editorRef.current,\n      path: '_input.value',\n      setValue(_: any, value: string) {\n        setCode(value);\n      }\n    })\n  }, [fieldName, registerField]);\n\n  return (\n    <Editor\n      className=\"editor\"\n      textareaId={fieldName}\n      value={code}\n      defaultValue={defaultValue}\n      onValueChange={setCode}\n      highlight={code => highlight(code, languages.markup, 'markup')}\n      padding={15}\n      ref={editorRef}\n    />\n  );\n};\n\nexport default CodeInput;","position":{"start":{"line":19,"column":1,"offset":786},"end":{"line":66,"column":4,"offset":1921},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":69,"column":1,"offset":1924},"end":{"line":69,"column":31,"offset":1954},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":69,"column":31,"offset":1954}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"react-simple-code-editor\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"#react-simple-code-editor\",\n    \"aria-label\": \"react simple code editor permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"React Simple Code Editor\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://satya164.xyz/react-simple-code-editor/\"\n  }), \"React Simple Code Editor\"), \" is a cool library focused on providing a simple way to add a code input source to user.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u26A0\\uFE0F All examples below are using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TypeScript\"), \", if you're not using it you can simply remove all type definitions as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.FC<Props>\"), \" from component definition.\")), mdx(\"h2\", {\n    \"id\": \"syntax-highlight\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#syntax-highlight\",\n    \"aria-label\": \"syntax highlight permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Syntax Highlight\"), mdx(\"p\", null, \"React Simple Code Editor use PrismJS to add syntax highlighting to code.\"), mdx(\"p\", null, \"You need to import each \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://prismjs.com/#supported-languages\"\n  }), \"language\"), \" that you want to use from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"prismjs/components/prism-{language}\"), \".\"), mdx(\"p\", null, \"You can also import custom themes from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"prismjs/themes/prism-{theme}.css\"), \".\"), mdx(\"h2\", {\n    \"id\": \"example\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#example\",\n    \"aria-label\": \"example permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Example\"), mdx(\"p\", null, \"Below you can see an example using only HTML/CSS syntax highlighting and using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"prism-dark\"), \" theme.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"import React, { useRef, useState, useEffect } from 'react';\\nimport Editor from 'react-simple-code-editor';\\nimport { useField } from '@unform/core'\\n\\nimport { highlight, languages } from 'prismjs';\\n\\nimport 'prismjs/components/prism-markup';\\nimport 'prismjs/components/prism-css';\\nimport 'prismjs/themes/prism-dark.css';\\n\\ninterface Props {\\n  name: string;\\n};\\n\\nconst CodeInput: React.FC<Props> = ({ name }) => {\\n  const [code, setCode] = useState('');\\n  const editorRef = useRef(null);\\n\\n  const { defaultValue, fieldName, registerField, error } = useField(name);\\n\\n  useEffect(() => {\\n    registerField({\\n      name: fieldName,\\n      ref: editorRef.current,\\n      path: '_input.value',\\n      setValue(_: any, value: string) {\\n        setCode(value);\\n      }\\n    })\\n  }, [fieldName, registerField]);\\n\\n  return (\\n    <Editor\\n      className=\\\"editor\\\"\\n      textareaId={fieldName}\\n      value={code}\\n      defaultValue={defaultValue}\\n      onValueChange={setCode}\\n      highlight={code => highlight(code, languages.markup, 'markup')}\\n      padding={15}\\n      ref={editorRef}\\n    />\\n  );\\n};\\n\\nexport default CodeInput;\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"react-simple-code-editor\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h1\" {...{\n        \"href\": \"#react-simple-code-editor\",\n        \"aria-label\": \"react simple code editor permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`React Simple Code Editor`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"http://satya164.xyz/react-simple-code-editor/\"\n      }}>{`React Simple Code Editor`}</a>{` is a cool library focused on providing a simple way to add a code input source to user.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`⚠️ All examples below are using `}<strong parentName=\"p\">{`TypeScript`}</strong>{`, if you're not using it you can simply remove all type definitions as the `}<inlineCode parentName=\"p\">{`React.FC<Props>`}</inlineCode>{` from component definition.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"syntax-highlight\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#syntax-highlight\",\n        \"aria-label\": \"syntax highlight permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Syntax Highlight`}</h2>\n    <p>{`React Simple Code Editor use PrismJS to add syntax highlighting to code.`}</p>\n    <p>{`You need to import each `}<a parentName=\"p\" {...{\n        \"href\": \"https://prismjs.com/#supported-languages\"\n      }}>{`language`}</a>{` that you want to use from `}<inlineCode parentName=\"p\">{`prismjs/components/prism-{language}`}</inlineCode>{`.`}</p>\n    <p>{`You can also import custom themes from `}<inlineCode parentName=\"p\">{`prismjs/themes/prism-{theme}.css`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"example\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#example\",\n        \"aria-label\": \"example permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Example`}</h2>\n    <p>{`Below you can see an example using only HTML/CSS syntax highlighting and using `}<inlineCode parentName=\"p\">{`prism-dark`}</inlineCode>{` theme.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"lineNumbers=true\",\n        \"lineNumbers\": \"true\"\n      }}>{`import React, { useRef, useState, useEffect } from 'react';\nimport Editor from 'react-simple-code-editor';\nimport { useField } from '@unform/core'\n\nimport { highlight, languages } from 'prismjs';\n\nimport 'prismjs/components/prism-markup';\nimport 'prismjs/components/prism-css';\nimport 'prismjs/themes/prism-dark.css';\n\ninterface Props {\n  name: string;\n};\n\nconst CodeInput: React.FC<Props> = ({ name }) => {\n  const [code, setCode] = useState('');\n  const editorRef = useRef(null);\n\n  const { defaultValue, fieldName, registerField, error } = useField(name);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: editorRef.current,\n      path: '_input.value',\n      setValue(_: any, value: string) {\n        setCode(value);\n      }\n    })\n  }, [fieldName, registerField]);\n\n  return (\n    <Editor\n      className=\"editor\"\n      textareaId={fieldName}\n      value={code}\n      defaultValue={defaultValue}\n      onValueChange={setCode}\n      highlight={code => highlight(code, languages.markup, 'markup')}\n      padding={15}\n      ref={editorRef}\n    />\n  );\n};\n\nexport default CodeInput;\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}