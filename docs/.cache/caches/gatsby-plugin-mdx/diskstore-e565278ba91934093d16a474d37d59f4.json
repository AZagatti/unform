{"expireTime":9007200835732669000,"key":"gatsby-plugin-mdx-entire-payload-5cc321b12de6828724123f5ef81bf7c4-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Complex structures","position":{"start":{"line":1,"column":3,"offset":2},"end":{"line":1,"column":21,"offset":20},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":21,"offset":20},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Most of the time, the form structure is based on how data is received or restored from the back-end including relationships and complex data structures.","position":{"start":{"line":3,"column":1,"offset":22},"end":{"line":3,"column":153,"offset":174},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":22},"end":{"line":3,"column":153,"offset":174},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"With Unform you can use the dot notation inside input name to nest structures like objects or arrays.","position":{"start":{"line":5,"column":1,"offset":176},"end":{"line":5,"column":102,"offset":277},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":176},"end":{"line":5,"column":102,"offset":277},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"<Input name=\"author.name\" /> // { author: { name: 'Diego' } }\n<Input name=\"lessons[0].name\" /> // { lessons: [{ name: 'Lesson 01' }] }\n<Input name=\"some.complex[0].data[0].structure\" /> // You already got it","position":{"start":{"line":7,"column":1,"offset":279},"end":{"line":11,"column":4,"offset":497},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can use the ","position":{"start":{"line":13,"column":1,"offset":499},"end":{"line":13,"column":17,"offset":515},"indent":[]}},{"type":"inlineCode","value":"Scope","position":{"start":{"line":13,"column":17,"offset":515},"end":{"line":13,"column":24,"offset":522},"indent":[]}},{"type":"text","value":" component to easily create children structures:","position":{"start":{"line":13,"column":24,"offset":522},"end":{"line":13,"column":72,"offset":570},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":499},"end":{"line":13,"column":72,"offset":570},"indent":[]}},{"type":"code","lang":"jsx","meta":"lineNumbers=true","value":"import { Form, Scope } from '@unform/core';\n\nexport default function CourseForm() {\n  function handleSubmit(data) {\n    console.log(data);\n\n    /**\n     * {\n     *   title: 'Course title',\n     *   author: {\n     *     name: 'John Doe',\n     *   },\n     *   modules: [\n     *     {\n     *       title: 'Module 01',\n     *       lessons: [\n     *         { title: 'Lesson 01' },\n     *         { title: 'Lesson 02' },\n     *       ]\n     *     },\n     *     {\n     *       title: 'Module 02',\n     *       lessons: [\n     *         { title: 'Lesson 03' },\n     *         { title: 'Lesson 04' },\n     *       ]\n     *     }\n     *   ]\n     * }\n     */\n  }\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Input name=\"title\" />\n      <Input name=\"author.name\" />\n\n      <Scope path=\"modules[0]\">\n        <Input name=\"title\" />\n\n        <Input name=\"lessons[0].videoId\" />\n        <Input name=\"lessons[1].videoId\" />\n      </Scope>\n\n      <Scope path=\"modules[1]\">\n        <Input name=\"title\" />\n\n        <Input name=\"lessons[0].videoId\" />\n        <Input name=\"lessons[1].videoId\" />\n      </Scope>\n    </Form>\n  );\n}","position":{"start":{"line":15,"column":1,"offset":572},"end":{"line":69,"column":4,"offset":1719},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":72,"column":1,"offset":1722},"end":{"line":72,"column":31,"offset":1752},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":72,"column":31,"offset":1752}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"complex-structures\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"#complex-structures\",\n    \"aria-label\": \"complex structures permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Complex structures\"), mdx(\"p\", null, \"Most of the time, the form structure is based on how data is received or restored from the back-end including relationships and complex data structures.\"), mdx(\"p\", null, \"With Unform you can use the dot notation inside input name to nest structures like objects or arrays.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Input name=\\\"author.name\\\" /> // { author: { name: 'Diego' } }\\n<Input name=\\\"lessons[0].name\\\" /> // { lessons: [{ name: 'Lesson 01' }] }\\n<Input name=\\\"some.complex[0].data[0].structure\\\" /> // You already got it\\n\")), mdx(\"p\", null, \"You can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Scope\"), \" component to easily create children structures:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"import { Form, Scope } from '@unform/core';\\n\\nexport default function CourseForm() {\\n  function handleSubmit(data) {\\n    console.log(data);\\n\\n    /**\\n     * {\\n     *   title: 'Course title',\\n     *   author: {\\n     *     name: 'John Doe',\\n     *   },\\n     *   modules: [\\n     *     {\\n     *       title: 'Module 01',\\n     *       lessons: [\\n     *         { title: 'Lesson 01' },\\n     *         { title: 'Lesson 02' },\\n     *       ]\\n     *     },\\n     *     {\\n     *       title: 'Module 02',\\n     *       lessons: [\\n     *         { title: 'Lesson 03' },\\n     *         { title: 'Lesson 04' },\\n     *       ]\\n     *     }\\n     *   ]\\n     * }\\n     */\\n  }\\n\\n  return (\\n    <Form onSubmit={handleSubmit}>\\n      <Input name=\\\"title\\\" />\\n      <Input name=\\\"author.name\\\" />\\n\\n      <Scope path=\\\"modules[0]\\\">\\n        <Input name=\\\"title\\\" />\\n\\n        <Input name=\\\"lessons[0].videoId\\\" />\\n        <Input name=\\\"lessons[1].videoId\\\" />\\n      </Scope>\\n\\n      <Scope path=\\\"modules[1]\\\">\\n        <Input name=\\\"title\\\" />\\n\\n        <Input name=\\\"lessons[0].videoId\\\" />\\n        <Input name=\\\"lessons[1].videoId\\\" />\\n      </Scope>\\n    </Form>\\n  );\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"complex-structures\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h1\" {...{\n        \"href\": \"#complex-structures\",\n        \"aria-label\": \"complex structures permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Complex structures`}</h1>\n    <p>{`Most of the time, the form structure is based on how data is received or restored from the back-end including relationships and complex data structures.`}</p>\n    <p>{`With Unform you can use the dot notation inside input name to nest structures like objects or arrays.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Input name=\"author.name\" /> // { author: { name: 'Diego' } }\n<Input name=\"lessons[0].name\" /> // { lessons: [{ name: 'Lesson 01' }] }\n<Input name=\"some.complex[0].data[0].structure\" /> // You already got it\n`}</code></pre>\n    <p>{`You can use the `}<inlineCode parentName=\"p\">{`Scope`}</inlineCode>{` component to easily create children structures:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"lineNumbers=true\",\n        \"lineNumbers\": \"true\"\n      }}>{`import { Form, Scope } from '@unform/core';\n\nexport default function CourseForm() {\n  function handleSubmit(data) {\n    console.log(data);\n\n    /**\n     * {\n     *   title: 'Course title',\n     *   author: {\n     *     name: 'John Doe',\n     *   },\n     *   modules: [\n     *     {\n     *       title: 'Module 01',\n     *       lessons: [\n     *         { title: 'Lesson 01' },\n     *         { title: 'Lesson 02' },\n     *       ]\n     *     },\n     *     {\n     *       title: 'Module 02',\n     *       lessons: [\n     *         { title: 'Lesson 03' },\n     *         { title: 'Lesson 04' },\n     *       ]\n     *     }\n     *   ]\n     * }\n     */\n  }\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Input name=\"title\" />\n      <Input name=\"author.name\" />\n\n      <Scope path=\"modules[0]\">\n        <Input name=\"title\" />\n\n        <Input name=\"lessons[0].videoId\" />\n        <Input name=\"lessons[1].videoId\" />\n      </Scope>\n\n      <Scope path=\"modules[1]\">\n        <Input name=\"title\" />\n\n        <Input name=\"lessons[0].videoId\" />\n        <Input name=\"lessons[1].videoId\" />\n      </Scope>\n    </Form>\n  );\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}