{"expireTime":9007200835732669000,"key":"gatsby-plugin-mdx-entire-payload-5b36ee06e480c031417e3ab460045a8f-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"React Select","position":{"start":{"line":1,"column":3,"offset":2},"end":{"line":1,"column":15,"offset":14},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":15,"offset":14},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://react-select.com/","children":[{"type":"text","value":"React Select","position":{"start":{"line":3,"column":2,"offset":17},"end":{"line":3,"column":14,"offset":29},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":16},"end":{"line":3,"column":42,"offset":57},"indent":[]}},{"type":"text","value":" is the coolest ReactJS custom ","position":{"start":{"line":3,"column":42,"offset":57},"end":{"line":3,"column":73,"offset":88},"indent":[]}},{"type":"inlineCode","value":"<select>","position":{"start":{"line":3,"column":73,"offset":88},"end":{"line":3,"column":83,"offset":98},"indent":[]}},{"type":"text","value":" library.","position":{"start":{"line":3,"column":83,"offset":98},"end":{"line":3,"column":92,"offset":107},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":16},"end":{"line":3,"column":92,"offset":107},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you're not using it, we recommend using it instead of using simple ","position":{"start":{"line":5,"column":1,"offset":109},"end":{"line":5,"column":71,"offset":179},"indent":[]}},{"type":"inlineCode","value":"<select>","position":{"start":{"line":5,"column":71,"offset":179},"end":{"line":5,"column":81,"offset":189},"indent":[]}},{"type":"text","value":" elements as it's highly customizable and provides an incredible API as we'll se below.","position":{"start":{"line":5,"column":81,"offset":189},"end":{"line":5,"column":168,"offset":276},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":109},"end":{"line":5,"column":168,"offset":276},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"⚠️ All examples below are using ","position":{"start":{"line":7,"column":3,"offset":280},"end":{"line":7,"column":35,"offset":312},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"TypeScript","position":{"start":{"line":7,"column":37,"offset":314},"end":{"line":7,"column":47,"offset":324},"indent":[]}}],"position":{"start":{"line":7,"column":35,"offset":312},"end":{"line":7,"column":49,"offset":326},"indent":[]}},{"type":"text","value":", if you're not using it you can simply remove all type definitions as the ","position":{"start":{"line":7,"column":49,"offset":326},"end":{"line":7,"column":124,"offset":401},"indent":[]}},{"type":"inlineCode","value":"React.FC<Props>","position":{"start":{"line":7,"column":124,"offset":401},"end":{"line":7,"column":141,"offset":418},"indent":[]}},{"type":"text","value":" from component definition.","position":{"start":{"line":7,"column":141,"offset":418},"end":{"line":7,"column":168,"offset":445},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":280},"end":{"line":7,"column":168,"offset":445},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":278},"end":{"line":7,"column":168,"offset":445},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Simple select","position":{"start":{"line":9,"column":4,"offset":450},"end":{"line":9,"column":17,"offset":463},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":447},"end":{"line":9,"column":17,"offset":463},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A simple replacer for default HTML ","position":{"start":{"line":11,"column":1,"offset":465},"end":{"line":11,"column":36,"offset":500},"indent":[]}},{"type":"inlineCode","value":"<select>","position":{"start":{"line":11,"column":36,"offset":500},"end":{"line":11,"column":46,"offset":510},"indent":[]}},{"type":"text","value":" element :)","position":{"start":{"line":11,"column":46,"offset":510},"end":{"line":11,"column":57,"offset":521},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":465},"end":{"line":11,"column":57,"offset":521},"indent":[]}},{"type":"code","lang":"jsx","meta":"lineNumbers=true","value":"import React, { useRef, useEffect } from 'react';\nimport ReactSelect, { OptionTypeBase, Props as SelectProps } from 'react-select';\nimport { useField } from '@unform/core';\n\ninterface Props extends SelectProps<OptionTypeBase> {\n  name: string;\n}\n\nconst Select: React.FC<Props> = ({ name, ...rest }) => {\n  const selectRef = useRef(null);\n  const { fieldName, defaultValue, registerField, error } = useField(name);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: selectRef.current,\n      path: 'state.value',\n      getValue: (ref: any) => {\n        if (rest.isMulti) {\n          if (!ref.state.value) {\n            return [];\n          }\n\n          return ref.state.value.map((option: OptionTypeBase) => option.value);\n        } else {\n          if (!ref.state.value) {\n            return '';\n          }\n\n          return ref.state.value.value;\n        }\n      }\n    });\n  }, [fieldName, registerField, rest.isMulti]);\n\n  return (\n    <ReactSelect\n      defaultValue={defaultValue}\n      ref={selectRef}\n      classNamePrefix=\"react-select\"\n      {...rest}\n    />\n  );\n};\n\nexport default Select;","position":{"start":{"line":13,"column":1,"offset":523},"end":{"line":60,"column":4,"offset":1673},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Creatable","position":{"start":{"line":62,"column":4,"offset":1678},"end":{"line":62,"column":13,"offset":1687},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":1675},"end":{"line":62,"column":13,"offset":1687},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"User can choose between default options or create new ones.","position":{"start":{"line":64,"column":1,"offset":1689},"end":{"line":64,"column":60,"offset":1748},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":1689},"end":{"line":64,"column":60,"offset":1748},"indent":[]}},{"type":"code","lang":"jsx","meta":"lineNumbers=true","value":"import React, { useRef, useEffect } from 'react';\nimport { OptionTypeBase } from 'react-select';\nimport Select, { Props as CreatableProps } from 'react-select/creatable'\nimport { useField } from '@unform/core';\n\ninterface Props extends CreatableProps<OptionTypeBase> {\n  name: string;\n}\n\nconst CreatableSelect: React.FC<Props> = ({ name, ...rest }) => {\n  const selectRef = useRef(null);\n  const { fieldName, defaultValue, registerField, error } = useField(name);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: selectRef.current,\n      path: 'state.value',\n      getValue: (ref: any) => {\n        if (rest.isMulti) {\n          if (!ref.state.value) {\n            return [];\n          }\n\n          return ref.state.value.map((option: OptionTypeBase) => option.value);\n        } else {\n          if (!ref.state.value) {\n            return '';\n          }\n\n          return ref.state.value.value;\n        }\n      }\n    });\n  }, [fieldName, registerField, rest.isMulti]);\n\n  return (\n    <Select\n      defaultValue={defaultValue}\n      ref={selectRef}\n      classNamePrefix=\"react-select\"\n      {...rest}\n    />\n  );\n};\n\nexport default CreatableSelect;","position":{"start":{"line":66,"column":1,"offset":1750},"end":{"line":114,"column":4,"offset":2954},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Async","position":{"start":{"line":116,"column":4,"offset":2959},"end":{"line":116,"column":9,"offset":2964},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":2956},"end":{"line":116,"column":9,"offset":2964},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Long lists of options? No problem! Use Async Select to make an asynchronous call to an API everytime user type something in the search box.","position":{"start":{"line":118,"column":1,"offset":2966},"end":{"line":118,"column":140,"offset":3105},"indent":[]}}],"position":{"start":{"line":118,"column":1,"offset":2966},"end":{"line":118,"column":140,"offset":3105},"indent":[]}},{"type":"code","lang":"jsx","meta":"lineNumbers=true","value":"import React, { useRef, useEffect } from 'react';\nimport { OptionTypeBase } from 'react-select';\nimport Select, { Props as AsyncProps } from 'react-select/async'\nimport { useField } from '@unform/core';\n\ninterface Props extends AsyncProps<OptionTypeBase> {\n  name: string;\n}\n\nconst AsyncSelect: React.FC<Props> = ({ name, ...rest }) => {\n  const selectRef = useRef(null);\n  const { fieldName, defaultValue, registerField, error } = useField(name);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: selectRef.current,\n      path: 'select.state.value',\n      getValue: (ref: any) => {\n        if (rest.isMulti) {\n          if (!ref.select.state.value) {\n            return [];\n          }\n\n          return ref.select.state.value.map((option: OptionTypeBase) => option.value);\n        } else {\n          if (!ref.select.state.value) {\n            return '';\n          }\n\n          return ref.select.state.value.value;\n        }\n      }\n    });\n  }, [fieldName, registerField, rest.isMulti]);\n\n  return (\n    <Select\n      cacheOptions\n      defaultValue={defaultValue}\n      ref={selectRef}\n      classNamePrefix=\"react-select\"\n      {...rest}\n    />\n  );\n};\n\nexport default AsyncSelect;","position":{"start":{"line":120,"column":1,"offset":3107},"end":{"line":169,"column":4,"offset":4345},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":172,"column":1,"offset":4348},"end":{"line":172,"column":31,"offset":4378},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":172,"column":31,"offset":4378}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"react-select\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"#react-select\",\n    \"aria-label\": \"react select permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"React Select\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://react-select.com/\"\n  }), \"React Select\"), \" is the coolest ReactJS custom \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<select>\"), \" library.\"), mdx(\"p\", null, \"If you're not using it, we recommend using it instead of using simple \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<select>\"), \" elements as it's highly customizable and provides an incredible API as we'll se below.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u26A0\\uFE0F All examples below are using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TypeScript\"), \", if you're not using it you can simply remove all type definitions as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.FC<Props>\"), \" from component definition.\")), mdx(\"h2\", {\n    \"id\": \"simple-select\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#simple-select\",\n    \"aria-label\": \"simple select permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Simple select\"), mdx(\"p\", null, \"A simple replacer for default HTML \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<select>\"), \" element :)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"import React, { useRef, useEffect } from 'react';\\nimport ReactSelect, { OptionTypeBase, Props as SelectProps } from 'react-select';\\nimport { useField } from '@unform/core';\\n\\ninterface Props extends SelectProps<OptionTypeBase> {\\n  name: string;\\n}\\n\\nconst Select: React.FC<Props> = ({ name, ...rest }) => {\\n  const selectRef = useRef(null);\\n  const { fieldName, defaultValue, registerField, error } = useField(name);\\n\\n  useEffect(() => {\\n    registerField({\\n      name: fieldName,\\n      ref: selectRef.current,\\n      path: 'state.value',\\n      getValue: (ref: any) => {\\n        if (rest.isMulti) {\\n          if (!ref.state.value) {\\n            return [];\\n          }\\n\\n          return ref.state.value.map((option: OptionTypeBase) => option.value);\\n        } else {\\n          if (!ref.state.value) {\\n            return '';\\n          }\\n\\n          return ref.state.value.value;\\n        }\\n      }\\n    });\\n  }, [fieldName, registerField, rest.isMulti]);\\n\\n  return (\\n    <ReactSelect\\n      defaultValue={defaultValue}\\n      ref={selectRef}\\n      classNamePrefix=\\\"react-select\\\"\\n      {...rest}\\n    />\\n  );\\n};\\n\\nexport default Select;\\n\")), mdx(\"h2\", {\n    \"id\": \"creatable\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#creatable\",\n    \"aria-label\": \"creatable permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Creatable\"), mdx(\"p\", null, \"User can choose between default options or create new ones.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"import React, { useRef, useEffect } from 'react';\\nimport { OptionTypeBase } from 'react-select';\\nimport Select, { Props as CreatableProps } from 'react-select/creatable'\\nimport { useField } from '@unform/core';\\n\\ninterface Props extends CreatableProps<OptionTypeBase> {\\n  name: string;\\n}\\n\\nconst CreatableSelect: React.FC<Props> = ({ name, ...rest }) => {\\n  const selectRef = useRef(null);\\n  const { fieldName, defaultValue, registerField, error } = useField(name);\\n\\n  useEffect(() => {\\n    registerField({\\n      name: fieldName,\\n      ref: selectRef.current,\\n      path: 'state.value',\\n      getValue: (ref: any) => {\\n        if (rest.isMulti) {\\n          if (!ref.state.value) {\\n            return [];\\n          }\\n\\n          return ref.state.value.map((option: OptionTypeBase) => option.value);\\n        } else {\\n          if (!ref.state.value) {\\n            return '';\\n          }\\n\\n          return ref.state.value.value;\\n        }\\n      }\\n    });\\n  }, [fieldName, registerField, rest.isMulti]);\\n\\n  return (\\n    <Select\\n      defaultValue={defaultValue}\\n      ref={selectRef}\\n      classNamePrefix=\\\"react-select\\\"\\n      {...rest}\\n    />\\n  );\\n};\\n\\nexport default CreatableSelect;\\n\")), mdx(\"h2\", {\n    \"id\": \"async\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#async\",\n    \"aria-label\": \"async permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Async\"), mdx(\"p\", null, \"Long lists of options? No problem! Use Async Select to make an asynchronous call to an API everytime user type something in the search box.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"import React, { useRef, useEffect } from 'react';\\nimport { OptionTypeBase } from 'react-select';\\nimport Select, { Props as AsyncProps } from 'react-select/async'\\nimport { useField } from '@unform/core';\\n\\ninterface Props extends AsyncProps<OptionTypeBase> {\\n  name: string;\\n}\\n\\nconst AsyncSelect: React.FC<Props> = ({ name, ...rest }) => {\\n  const selectRef = useRef(null);\\n  const { fieldName, defaultValue, registerField, error } = useField(name);\\n\\n  useEffect(() => {\\n    registerField({\\n      name: fieldName,\\n      ref: selectRef.current,\\n      path: 'select.state.value',\\n      getValue: (ref: any) => {\\n        if (rest.isMulti) {\\n          if (!ref.select.state.value) {\\n            return [];\\n          }\\n\\n          return ref.select.state.value.map((option: OptionTypeBase) => option.value);\\n        } else {\\n          if (!ref.select.state.value) {\\n            return '';\\n          }\\n\\n          return ref.select.state.value.value;\\n        }\\n      }\\n    });\\n  }, [fieldName, registerField, rest.isMulti]);\\n\\n  return (\\n    <Select\\n      cacheOptions\\n      defaultValue={defaultValue}\\n      ref={selectRef}\\n      classNamePrefix=\\\"react-select\\\"\\n      {...rest}\\n    />\\n  );\\n};\\n\\nexport default AsyncSelect;\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"react-select\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h1\" {...{\n        \"href\": \"#react-select\",\n        \"aria-label\": \"react select permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`React Select`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://react-select.com/\"\n      }}>{`React Select`}</a>{` is the coolest ReactJS custom `}<inlineCode parentName=\"p\">{`<select>`}</inlineCode>{` library.`}</p>\n    <p>{`If you're not using it, we recommend using it instead of using simple `}<inlineCode parentName=\"p\">{`<select>`}</inlineCode>{` elements as it's highly customizable and provides an incredible API as we'll se below.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`⚠️ All examples below are using `}<strong parentName=\"p\">{`TypeScript`}</strong>{`, if you're not using it you can simply remove all type definitions as the `}<inlineCode parentName=\"p\">{`React.FC<Props>`}</inlineCode>{` from component definition.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"simple-select\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#simple-select\",\n        \"aria-label\": \"simple select permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Simple select`}</h2>\n    <p>{`A simple replacer for default HTML `}<inlineCode parentName=\"p\">{`<select>`}</inlineCode>{` element :)`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"lineNumbers=true\",\n        \"lineNumbers\": \"true\"\n      }}>{`import React, { useRef, useEffect } from 'react';\nimport ReactSelect, { OptionTypeBase, Props as SelectProps } from 'react-select';\nimport { useField } from '@unform/core';\n\ninterface Props extends SelectProps<OptionTypeBase> {\n  name: string;\n}\n\nconst Select: React.FC<Props> = ({ name, ...rest }) => {\n  const selectRef = useRef(null);\n  const { fieldName, defaultValue, registerField, error } = useField(name);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: selectRef.current,\n      path: 'state.value',\n      getValue: (ref: any) => {\n        if (rest.isMulti) {\n          if (!ref.state.value) {\n            return [];\n          }\n\n          return ref.state.value.map((option: OptionTypeBase) => option.value);\n        } else {\n          if (!ref.state.value) {\n            return '';\n          }\n\n          return ref.state.value.value;\n        }\n      }\n    });\n  }, [fieldName, registerField, rest.isMulti]);\n\n  return (\n    <ReactSelect\n      defaultValue={defaultValue}\n      ref={selectRef}\n      classNamePrefix=\"react-select\"\n      {...rest}\n    />\n  );\n};\n\nexport default Select;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"creatable\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#creatable\",\n        \"aria-label\": \"creatable permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Creatable`}</h2>\n    <p>{`User can choose between default options or create new ones.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"lineNumbers=true\",\n        \"lineNumbers\": \"true\"\n      }}>{`import React, { useRef, useEffect } from 'react';\nimport { OptionTypeBase } from 'react-select';\nimport Select, { Props as CreatableProps } from 'react-select/creatable'\nimport { useField } from '@unform/core';\n\ninterface Props extends CreatableProps<OptionTypeBase> {\n  name: string;\n}\n\nconst CreatableSelect: React.FC<Props> = ({ name, ...rest }) => {\n  const selectRef = useRef(null);\n  const { fieldName, defaultValue, registerField, error } = useField(name);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: selectRef.current,\n      path: 'state.value',\n      getValue: (ref: any) => {\n        if (rest.isMulti) {\n          if (!ref.state.value) {\n            return [];\n          }\n\n          return ref.state.value.map((option: OptionTypeBase) => option.value);\n        } else {\n          if (!ref.state.value) {\n            return '';\n          }\n\n          return ref.state.value.value;\n        }\n      }\n    });\n  }, [fieldName, registerField, rest.isMulti]);\n\n  return (\n    <Select\n      defaultValue={defaultValue}\n      ref={selectRef}\n      classNamePrefix=\"react-select\"\n      {...rest}\n    />\n  );\n};\n\nexport default CreatableSelect;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"async\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#async\",\n        \"aria-label\": \"async permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Async`}</h2>\n    <p>{`Long lists of options? No problem! Use Async Select to make an asynchronous call to an API everytime user type something in the search box.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"lineNumbers=true\",\n        \"lineNumbers\": \"true\"\n      }}>{`import React, { useRef, useEffect } from 'react';\nimport { OptionTypeBase } from 'react-select';\nimport Select, { Props as AsyncProps } from 'react-select/async'\nimport { useField } from '@unform/core';\n\ninterface Props extends AsyncProps<OptionTypeBase> {\n  name: string;\n}\n\nconst AsyncSelect: React.FC<Props> = ({ name, ...rest }) => {\n  const selectRef = useRef(null);\n  const { fieldName, defaultValue, registerField, error } = useField(name);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: selectRef.current,\n      path: 'select.state.value',\n      getValue: (ref: any) => {\n        if (rest.isMulti) {\n          if (!ref.select.state.value) {\n            return [];\n          }\n\n          return ref.select.state.value.map((option: OptionTypeBase) => option.value);\n        } else {\n          if (!ref.select.state.value) {\n            return '';\n          }\n\n          return ref.select.state.value.value;\n        }\n      }\n    });\n  }, [fieldName, registerField, rest.isMulti]);\n\n  return (\n    <Select\n      cacheOptions\n      defaultValue={defaultValue}\n      ref={selectRef}\n      classNamePrefix=\"react-select\"\n      {...rest}\n    />\n  );\n};\n\nexport default AsyncSelect;\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}