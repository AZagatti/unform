{"expireTime":9007200835732670000,"key":"gatsby-plugin-mdx-entire-payload-d184d7d64650fe93ea467445cef93aa5-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"React Native","position":{"start":{"line":1,"column":3,"offset":2},"end":{"line":1,"column":15,"offset":14},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":15,"offset":14},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The Unform API is almost identic between web and mobile, below you can see an example of an Input and a Form using Unform and React Native.","position":{"start":{"line":3,"column":1,"offset":16},"end":{"line":3,"column":140,"offset":155},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":16},"end":{"line":3,"column":140,"offset":155},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Input component","position":{"start":{"line":5,"column":4,"offset":160},"end":{"line":5,"column":19,"offset":175},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":157},"end":{"line":5,"column":19,"offset":175},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In React Native we need to use ","position":{"start":{"line":7,"column":1,"offset":177},"end":{"line":7,"column":32,"offset":208},"indent":[]}},{"type":"inlineCode","value":"TextInput","position":{"start":{"line":7,"column":32,"offset":208},"end":{"line":7,"column":43,"offset":219},"indent":[]}},{"type":"text","value":" provided by the ","position":{"start":{"line":7,"column":43,"offset":219},"end":{"line":7,"column":60,"offset":236},"indent":[]}},{"type":"inlineCode","value":"react-native","position":{"start":{"line":7,"column":60,"offset":236},"end":{"line":7,"column":74,"offset":250},"indent":[]}},{"type":"text","value":" package.","position":{"start":{"line":7,"column":74,"offset":250},"end":{"line":7,"column":83,"offset":259},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":177},"end":{"line":7,"column":83,"offset":259},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Also, to keep the field uncontrolled, that is, don't store it's value within a state, we need to use the ","position":{"start":{"line":9,"column":1,"offset":261},"end":{"line":9,"column":106,"offset":366},"indent":[]}},{"type":"inlineCode","value":"_lastNativeText","position":{"start":{"line":9,"column":106,"offset":366},"end":{"line":9,"column":123,"offset":383},"indent":[]}},{"type":"text","value":" to get the field value and use the ","position":{"start":{"line":9,"column":123,"offset":383},"end":{"line":9,"column":159,"offset":419},"indent":[]}},{"type":"inlineCode","value":"setNativeProps","position":{"start":{"line":9,"column":159,"offset":419},"end":{"line":9,"column":175,"offset":435},"indent":[]}},{"type":"text","value":" to set the value within native renderer.","position":{"start":{"line":9,"column":175,"offset":435},"end":{"line":9,"column":216,"offset":476},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":261},"end":{"line":9,"column":216,"offset":476},"indent":[]}},{"type":"code","lang":"jsx","meta":"title=Input.js lineNumbers=true","value":"import React, { useRef, useEffect }  from 'react';\nimport { Text, TextInput } from 'react-native';\nimport { useField } from '@unform/core';\n\nfunction Input({ name, label, ...rest }) {\n  const inputRef = useRef(null);\n  const { fieldName, registerField, defaultValue = '', error } = useField(name);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: '_lastNativeText',\n      getValue(ref) {\n        return ref._lastNativeText || '';\n      },\n      setValue(ref, value) {\n        ref.setNativeProps({ text: value });\n        ref._lastNativeText = value;\n      },\n      clearValue(ref) {\n        ref.setNativeProps({ text: '' });\n        ref._lastNativeText = '';\n      }\n    })\n  }, [fieldName, registerField]);\n\n  return (\n    <>\n      { label && <Text>{label}</Text> }\n\n      <TextInput\n        ref={inputRef}\n        defaultValue={defaultValue}\n        {...rest}\n      />\n    </>\n  );\n}\n\nexport default Input;","position":{"start":{"line":11,"column":1,"offset":478},"end":{"line":53,"column":4,"offset":1485},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Form component","position":{"start":{"line":55,"column":4,"offset":1490},"end":{"line":55,"column":18,"offset":1504},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":1487},"end":{"line":55,"column":18,"offset":1504},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The only difference between the web form is that in React Native we don't have ","position":{"start":{"line":57,"column":1,"offset":1506},"end":{"line":57,"column":80,"offset":1585},"indent":[]}},{"type":"inlineCode","value":"<button type\"submit\" />","position":{"start":{"line":57,"column":80,"offset":1585},"end":{"line":57,"column":105,"offset":1610},"indent":[]}},{"type":"text","value":", so the form submit must be triggered manually.","position":{"start":{"line":57,"column":105,"offset":1610},"end":{"line":57,"column":153,"offset":1658},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":1506},"end":{"line":57,"column":153,"offset":1658},"indent":[]}},{"type":"code","lang":"jsx","meta":"title=SignIn.js lineNumbers=true","value":"import React, { useRef } from 'react';\nimport { Button } from 'react-native';\nimport { Form } from '@unform/mobile';\nimport Input from './components/Input';\n\nexport default function SignIn() {\n  const formRef = useRef(null);\n\n  function handleSubmit(data) {\n    console.log(data);\n    // { email: 'test@example.com', password: '123456' }\n  }\n\n  return (\n    <Form ref={formRef} onSubmit={handleSubmit}>\n      <Input name=\"email\" type=\"email\" />\n      <Input name=\"password\" type=\"password\" />\n\n      <Button title=\"Sign in\" onPress={formRef.current.submitForm} />\n    </Form>\n  );\n}","position":{"start":{"line":59,"column":1,"offset":1660},"end":{"line":82,"column":4,"offset":2286},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Unform exposes a ","position":{"start":{"line":84,"column":1,"offset":2288},"end":{"line":84,"column":18,"offset":2305},"indent":[]}},{"type":"inlineCode","value":"submitForm","position":{"start":{"line":84,"column":18,"offset":2305},"end":{"line":84,"column":30,"offset":2317},"indent":[]}},{"type":"text","value":" function within form reference, so calling it will trigger ","position":{"start":{"line":84,"column":30,"offset":2317},"end":{"line":84,"column":90,"offset":2377},"indent":[]}},{"type":"inlineCode","value":"onSubmit","position":{"start":{"line":84,"column":90,"offset":2377},"end":{"line":84,"column":100,"offset":2387},"indent":[]}},{"type":"text","value":" prop passing all the field data to it.","position":{"start":{"line":84,"column":100,"offset":2387},"end":{"line":84,"column":139,"offset":2426},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":2288},"end":{"line":84,"column":139,"offset":2426},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":87,"column":1,"offset":2429},"end":{"line":87,"column":31,"offset":2459},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":87,"column":31,"offset":2459}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"react-native\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"#react-native\",\n    \"aria-label\": \"react native permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"React Native\"), mdx(\"p\", null, \"The Unform API is almost identic between web and mobile, below you can see an example of an Input and a Form using Unform and React Native.\"), mdx(\"h2\", {\n    \"id\": \"input-component\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#input-component\",\n    \"aria-label\": \"input component permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Input component\"), mdx(\"p\", null, \"In React Native we need to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TextInput\"), \" provided by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-native\"), \" package.\"), mdx(\"p\", null, \"Also, to keep the field uncontrolled, that is, don't store it's value within a state, we need to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_lastNativeText\"), \" to get the field value and use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setNativeProps\"), \" to set the value within native renderer.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=Input.js lineNumbers=true\",\n    \"title\": \"Input.js\",\n    \"lineNumbers\": \"true\"\n  }), \"import React, { useRef, useEffect }  from 'react';\\nimport { Text, TextInput } from 'react-native';\\nimport { useField } from '@unform/core';\\n\\nfunction Input({ name, label, ...rest }) {\\n  const inputRef = useRef(null);\\n  const { fieldName, registerField, defaultValue = '', error } = useField(name);\\n\\n  useEffect(() => {\\n    registerField({\\n      name: fieldName,\\n      ref: inputRef.current,\\n      path: '_lastNativeText',\\n      getValue(ref) {\\n        return ref._lastNativeText || '';\\n      },\\n      setValue(ref, value) {\\n        ref.setNativeProps({ text: value });\\n        ref._lastNativeText = value;\\n      },\\n      clearValue(ref) {\\n        ref.setNativeProps({ text: '' });\\n        ref._lastNativeText = '';\\n      }\\n    })\\n  }, [fieldName, registerField]);\\n\\n  return (\\n    <>\\n      { label && <Text>{label}</Text> }\\n\\n      <TextInput\\n        ref={inputRef}\\n        defaultValue={defaultValue}\\n        {...rest}\\n      />\\n    </>\\n  );\\n}\\n\\nexport default Input;\\n\")), mdx(\"h2\", {\n    \"id\": \"form-component\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#form-component\",\n    \"aria-label\": \"form component permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Form component\"), mdx(\"p\", null, \"The only difference between the web form is that in React Native we don't have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<button type\\\"submit\\\" />\"), \", so the form submit must be triggered manually.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=SignIn.js lineNumbers=true\",\n    \"title\": \"SignIn.js\",\n    \"lineNumbers\": \"true\"\n  }), \"import React, { useRef } from 'react';\\nimport { Button } from 'react-native';\\nimport { Form } from '@unform/mobile';\\nimport Input from './components/Input';\\n\\nexport default function SignIn() {\\n  const formRef = useRef(null);\\n\\n  function handleSubmit(data) {\\n    console.log(data);\\n    // { email: 'test@example.com', password: '123456' }\\n  }\\n\\n  return (\\n    <Form ref={formRef} onSubmit={handleSubmit}>\\n      <Input name=\\\"email\\\" type=\\\"email\\\" />\\n      <Input name=\\\"password\\\" type=\\\"password\\\" />\\n\\n      <Button title=\\\"Sign in\\\" onPress={formRef.current.submitForm} />\\n    </Form>\\n  );\\n}\\n\")), mdx(\"p\", null, \"Unform exposes a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"submitForm\"), \" function within form reference, so calling it will trigger \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onSubmit\"), \" prop passing all the field data to it.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"react-native\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h1\" {...{\n        \"href\": \"#react-native\",\n        \"aria-label\": \"react native permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`React Native`}</h1>\n    <p>{`The Unform API is almost identic between web and mobile, below you can see an example of an Input and a Form using Unform and React Native.`}</p>\n    <h2 {...{\n      \"id\": \"input-component\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#input-component\",\n        \"aria-label\": \"input component permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Input component`}</h2>\n    <p>{`In React Native we need to use `}<inlineCode parentName=\"p\">{`TextInput`}</inlineCode>{` provided by the `}<inlineCode parentName=\"p\">{`react-native`}</inlineCode>{` package.`}</p>\n    <p>{`Also, to keep the field uncontrolled, that is, don't store it's value within a state, we need to use the `}<inlineCode parentName=\"p\">{`_lastNativeText`}</inlineCode>{` to get the field value and use the `}<inlineCode parentName=\"p\">{`setNativeProps`}</inlineCode>{` to set the value within native renderer.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"title=Input.js lineNumbers=true\",\n        \"title\": \"Input.js\",\n        \"lineNumbers\": \"true\"\n      }}>{`import React, { useRef, useEffect }  from 'react';\nimport { Text, TextInput } from 'react-native';\nimport { useField } from '@unform/core';\n\nfunction Input({ name, label, ...rest }) {\n  const inputRef = useRef(null);\n  const { fieldName, registerField, defaultValue = '', error } = useField(name);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: '_lastNativeText',\n      getValue(ref) {\n        return ref._lastNativeText || '';\n      },\n      setValue(ref, value) {\n        ref.setNativeProps({ text: value });\n        ref._lastNativeText = value;\n      },\n      clearValue(ref) {\n        ref.setNativeProps({ text: '' });\n        ref._lastNativeText = '';\n      }\n    })\n  }, [fieldName, registerField]);\n\n  return (\n    <>\n      { label && <Text>{label}</Text> }\n\n      <TextInput\n        ref={inputRef}\n        defaultValue={defaultValue}\n        {...rest}\n      />\n    </>\n  );\n}\n\nexport default Input;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"form-component\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#form-component\",\n        \"aria-label\": \"form component permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Form component`}</h2>\n    <p>{`The only difference between the web form is that in React Native we don't have `}<inlineCode parentName=\"p\">{`<button type\"submit\" />`}</inlineCode>{`, so the form submit must be triggered manually.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"title=SignIn.js lineNumbers=true\",\n        \"title\": \"SignIn.js\",\n        \"lineNumbers\": \"true\"\n      }}>{`import React, { useRef } from 'react';\nimport { Button } from 'react-native';\nimport { Form } from '@unform/mobile';\nimport Input from './components/Input';\n\nexport default function SignIn() {\n  const formRef = useRef(null);\n\n  function handleSubmit(data) {\n    console.log(data);\n    // { email: 'test@example.com', password: '123456' }\n  }\n\n  return (\n    <Form ref={formRef} onSubmit={handleSubmit}>\n      <Input name=\"email\" type=\"email\" />\n      <Input name=\"password\" type=\"password\" />\n\n      <Button title=\"Sign in\" onPress={formRef.current.submitForm} />\n    </Form>\n  );\n}\n`}</code></pre>\n    <p>{`Unform exposes a `}<inlineCode parentName=\"p\">{`submitForm`}</inlineCode>{` function within form reference, so calling it will trigger `}<inlineCode parentName=\"p\">{`onSubmit`}</inlineCode>{` prop passing all the field data to it.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}