{"expireTime":9007200835732668000,"key":"gatsby-plugin-mdx-entire-payload-591dc32a11ce34948ed8e65fee80eb50-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"React Input Mask","position":{"start":{"line":1,"column":3,"offset":2},"end":{"line":1,"column":19,"offset":18},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":19,"offset":18},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/sanniassin/react-input-mask","children":[{"type":"text","value":"React Input Mask","position":{"start":{"line":3,"column":2,"offset":21},"end":{"line":3,"column":18,"offset":37},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":20},"end":{"line":3,"column":67,"offset":86},"indent":[]}},{"type":"text","value":" offers an easy way to add masks to inputs.","position":{"start":{"line":3,"column":67,"offset":86},"end":{"line":3,"column":110,"offset":129},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":20},"end":{"line":3,"column":110,"offset":129},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"⚠️ All examples below are using ","position":{"start":{"line":5,"column":3,"offset":133},"end":{"line":5,"column":35,"offset":165},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"TypeScript","position":{"start":{"line":5,"column":37,"offset":167},"end":{"line":5,"column":47,"offset":177},"indent":[]}}],"position":{"start":{"line":5,"column":35,"offset":165},"end":{"line":5,"column":49,"offset":179},"indent":[]}},{"type":"text","value":", if you're not using it you can simply remove all type definitions as the ","position":{"start":{"line":5,"column":49,"offset":179},"end":{"line":5,"column":124,"offset":254},"indent":[]}},{"type":"inlineCode","value":"React.FC<Props>","position":{"start":{"line":5,"column":124,"offset":254},"end":{"line":5,"column":141,"offset":271},"indent":[]}},{"type":"text","value":" from component definition.","position":{"start":{"line":5,"column":141,"offset":271},"end":{"line":5,"column":168,"offset":298},"indent":[]}}],"position":{"start":{"line":5,"column":3,"offset":133},"end":{"line":5,"column":168,"offset":298},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":131},"end":{"line":5,"column":168,"offset":298},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example","position":{"start":{"line":7,"column":4,"offset":303},"end":{"line":7,"column":11,"offset":310},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":300},"end":{"line":7,"column":11,"offset":310},"indent":[]}},{"type":"code","lang":"jsx","meta":"lineNumbers=true","value":"import React, { useRef, useEffect }  from 'react';\nimport ReactInputMask, { Props as InputProps } from 'react-input-mask';\n\nimport { useField } from '@unform/core';\n\nimport 'react-datepicker/dist/react-datepicker.css';\n\ninterface Props extends InputProps {\n  name: string;\n}\n\nconst InputMask: React.FC<Props> = ({ name, ...rest }) => {\n  const inputRef = useRef(null);\n  const { fieldName, registerField, defaultValue, error } = useField(name);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value',\n      setValue(ref: any, value: string) {\n        ref.setInputValue('');\n      },\n      clearValue(ref: any) {\n        ref.setInputValue('');\n      }\n    })\n  }, [fieldName, registerField]);\n\n  return (\n    <ReactInputMask\n      ref={inputRef}\n      defaultValue={defaultValue}\n      {...rest}\n    />\n  );\n};\n\nexport default InputMask;","position":{"start":{"line":9,"column":1,"offset":312},"end":{"line":49,"column":4,"offset":1234},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":52,"column":1,"offset":1237},"end":{"line":52,"column":31,"offset":1267},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":52,"column":31,"offset":1267}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"react-input-mask\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"#react-input-mask\",\n    \"aria-label\": \"react input mask permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"React Input Mask\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/sanniassin/react-input-mask\"\n  }), \"React Input Mask\"), \" offers an easy way to add masks to inputs.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u26A0\\uFE0F All examples below are using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TypeScript\"), \", if you're not using it you can simply remove all type definitions as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.FC<Props>\"), \" from component definition.\")), mdx(\"h2\", {\n    \"id\": \"example\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#example\",\n    \"aria-label\": \"example permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"import React, { useRef, useEffect }  from 'react';\\nimport ReactInputMask, { Props as InputProps } from 'react-input-mask';\\n\\nimport { useField } from '@unform/core';\\n\\nimport 'react-datepicker/dist/react-datepicker.css';\\n\\ninterface Props extends InputProps {\\n  name: string;\\n}\\n\\nconst InputMask: React.FC<Props> = ({ name, ...rest }) => {\\n  const inputRef = useRef(null);\\n  const { fieldName, registerField, defaultValue, error } = useField(name);\\n\\n  useEffect(() => {\\n    registerField({\\n      name: fieldName,\\n      ref: inputRef.current,\\n      path: 'value',\\n      setValue(ref: any, value: string) {\\n        ref.setInputValue('');\\n      },\\n      clearValue(ref: any) {\\n        ref.setInputValue('');\\n      }\\n    })\\n  }, [fieldName, registerField]);\\n\\n  return (\\n    <ReactInputMask\\n      ref={inputRef}\\n      defaultValue={defaultValue}\\n      {...rest}\\n    />\\n  );\\n};\\n\\nexport default InputMask;\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"react-input-mask\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h1\" {...{\n        \"href\": \"#react-input-mask\",\n        \"aria-label\": \"react input mask permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`React Input Mask`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/sanniassin/react-input-mask\"\n      }}>{`React Input Mask`}</a>{` offers an easy way to add masks to inputs.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`⚠️ All examples below are using `}<strong parentName=\"p\">{`TypeScript`}</strong>{`, if you're not using it you can simply remove all type definitions as the `}<inlineCode parentName=\"p\">{`React.FC<Props>`}</inlineCode>{` from component definition.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"example\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#example\",\n        \"aria-label\": \"example permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"lineNumbers=true\",\n        \"lineNumbers\": \"true\"\n      }}>{`import React, { useRef, useEffect }  from 'react';\nimport ReactInputMask, { Props as InputProps } from 'react-input-mask';\n\nimport { useField } from '@unform/core';\n\nimport 'react-datepicker/dist/react-datepicker.css';\n\ninterface Props extends InputProps {\n  name: string;\n}\n\nconst InputMask: React.FC<Props> = ({ name, ...rest }) => {\n  const inputRef = useRef(null);\n  const { fieldName, registerField, defaultValue, error } = useField(name);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value',\n      setValue(ref: any, value: string) {\n        ref.setInputValue('');\n      },\n      clearValue(ref: any) {\n        ref.setInputValue('');\n      }\n    })\n  }, [fieldName, registerField]);\n\n  return (\n    <ReactInputMask\n      ref={inputRef}\n      defaultValue={defaultValue}\n      {...rest}\n    />\n  );\n};\n\nexport default InputMask;\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}