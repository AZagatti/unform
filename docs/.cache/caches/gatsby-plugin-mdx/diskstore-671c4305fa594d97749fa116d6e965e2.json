{"expireTime":9007200835732669000,"key":"gatsby-plugin-mdx-entire-payload-dd46e8c4dc2ca6ba6c64817d44e9da87-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Initial data","position":{"start":{"line":1,"column":3,"offset":2},"end":{"line":1,"column":15,"offset":14},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":15,"offset":14},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To provide custom initial data to inputs you can provide an ","position":{"start":{"line":3,"column":1,"offset":16},"end":{"line":3,"column":61,"offset":76},"indent":[]}},{"type":"inlineCode","value":"initialData","position":{"start":{"line":3,"column":61,"offset":76},"end":{"line":3,"column":74,"offset":89},"indent":[]}},{"type":"text","value":" prop to ","position":{"start":{"line":3,"column":74,"offset":89},"end":{"line":3,"column":83,"offset":98},"indent":[]}},{"type":"inlineCode","value":"<Form />","position":{"start":{"line":3,"column":83,"offset":98},"end":{"line":3,"column":93,"offset":108},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":3,"column":93,"offset":108},"end":{"line":3,"column":94,"offset":109},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":16},"end":{"line":3,"column":94,"offset":109},"indent":[]}},{"type":"code","lang":"jsx","meta":"lineNumbers=true","value":"export default function MyForm() {\n  return (\n    <Form initialData={{ email: 'test@example.com' }}>\n      <Input name=\"email\" />\n    </Form>\n  );\n}","position":{"start":{"line":5,"column":1,"offset":111},"end":{"line":13,"column":4,"offset":287},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Set initial data asynchronously","position":{"start":{"line":15,"column":4,"offset":292},"end":{"line":15,"column":35,"offset":323},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":289},"end":{"line":15,"column":35,"offset":323},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As, most of the times, Unform uses ","position":{"start":{"line":17,"column":1,"offset":325},"end":{"line":17,"column":36,"offset":360},"indent":[]}},{"type":"inlineCode","value":"defaultValue","position":{"start":{"line":17,"column":36,"offset":360},"end":{"line":17,"column":50,"offset":374},"indent":[]}},{"type":"text","value":" prop of inputs to set the initial data, when you get the data from an API request or an asynchronous call, the ","position":{"start":{"line":17,"column":50,"offset":374},"end":{"line":17,"column":162,"offset":486},"indent":[]}},{"type":"inlineCode","value":"initialData","position":{"start":{"line":17,"column":162,"offset":486},"end":{"line":17,"column":175,"offset":499},"indent":[]}},{"type":"text","value":" may not work, as the ","position":{"start":{"line":17,"column":175,"offset":499},"end":{"line":17,"column":197,"offset":521},"indent":[]}},{"type":"inlineCode","value":"defaultValue","position":{"start":{"line":17,"column":197,"offset":521},"end":{"line":17,"column":211,"offset":535},"indent":[]}},{"type":"text","value":" don't reflect changes.","position":{"start":{"line":17,"column":211,"offset":535},"end":{"line":17,"column":234,"offset":558},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":325},"end":{"line":17,"column":234,"offset":558},"indent":[]}},{"type":"code","lang":"jsx","meta":"lineNumbers=true","value":"export default function MyForm() {\n  const formRef = useRef(null);\n\n  useEffect(() => {\n    someApiCall().then(user => {\n      formRef.current.setData({ email: user.email });\n    });\n  }, []);\n\n  return (\n    <Form ref={formRef}>\n      <Input name=\"email\" />\n    </Form>\n  );\n}","position":{"start":{"line":19,"column":1,"offset":560},"end":{"line":35,"column":4,"offset":865},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":37,"column":1,"offset":867},"end":{"line":37,"column":5,"offset":871},"indent":[]}},{"type":"inlineCode","value":"setData","position":{"start":{"line":37,"column":5,"offset":871},"end":{"line":37,"column":14,"offset":880},"indent":[]}},{"type":"text","value":" function exposed by Unform API will replace input data based on the propery name provided in the object received as parameter.","position":{"start":{"line":37,"column":14,"offset":880},"end":{"line":37,"column":141,"offset":1007},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":867},"end":{"line":37,"column":141,"offset":1007},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":40,"column":1,"offset":1010},"end":{"line":40,"column":31,"offset":1040},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":40,"column":31,"offset":1040}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"initial-data\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"#initial-data\",\n    \"aria-label\": \"initial data permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Initial data\"), mdx(\"p\", null, \"To provide custom initial data to inputs you can provide an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"initialData\"), \" prop to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Form />\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"export default function MyForm() {\\n  return (\\n    <Form initialData={{ email: 'test@example.com' }}>\\n      <Input name=\\\"email\\\" />\\n    </Form>\\n  );\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"set-initial-data-asynchronously\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#set-initial-data-asynchronously\",\n    \"aria-label\": \"set initial data asynchronously permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Set initial data asynchronously\"), mdx(\"p\", null, \"As, most of the times, Unform uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultValue\"), \" prop of inputs to set the initial data, when you get the data from an API request or an asynchronous call, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"initialData\"), \" may not work, as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultValue\"), \" don't reflect changes.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"export default function MyForm() {\\n  const formRef = useRef(null);\\n\\n  useEffect(() => {\\n    someApiCall().then(user => {\\n      formRef.current.setData({ email: user.email });\\n    });\\n  }, []);\\n\\n  return (\\n    <Form ref={formRef}>\\n      <Input name=\\\"email\\\" />\\n    </Form>\\n  );\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setData\"), \" function exposed by Unform API will replace input data based on the propery name provided in the object received as parameter.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"initial-data\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h1\" {...{\n        \"href\": \"#initial-data\",\n        \"aria-label\": \"initial data permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Initial data`}</h1>\n    <p>{`To provide custom initial data to inputs you can provide an `}<inlineCode parentName=\"p\">{`initialData`}</inlineCode>{` prop to `}<inlineCode parentName=\"p\">{`<Form />`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"lineNumbers=true\",\n        \"lineNumbers\": \"true\"\n      }}>{`export default function MyForm() {\n  return (\n    <Form initialData={{ email: 'test@example.com' }}>\n      <Input name=\"email\" />\n    </Form>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"set-initial-data-asynchronously\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#set-initial-data-asynchronously\",\n        \"aria-label\": \"set initial data asynchronously permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Set initial data asynchronously`}</h2>\n    <p>{`As, most of the times, Unform uses `}<inlineCode parentName=\"p\">{`defaultValue`}</inlineCode>{` prop of inputs to set the initial data, when you get the data from an API request or an asynchronous call, the `}<inlineCode parentName=\"p\">{`initialData`}</inlineCode>{` may not work, as the `}<inlineCode parentName=\"p\">{`defaultValue`}</inlineCode>{` don't reflect changes.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"lineNumbers=true\",\n        \"lineNumbers\": \"true\"\n      }}>{`export default function MyForm() {\n  const formRef = useRef(null);\n\n  useEffect(() => {\n    someApiCall().then(user => {\n      formRef.current.setData({ email: user.email });\n    });\n  }, []);\n\n  return (\n    <Form ref={formRef}>\n      <Input name=\"email\" />\n    </Form>\n  );\n}\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`setData`}</inlineCode>{` function exposed by Unform API will replace input data based on the propery name provided in the object received as parameter.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}