{"expireTime":9007200835732669000,"key":"gatsby-plugin-mdx-entire-payload-15c324b6a4055be379191abbeb8d2428-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Basic form","position":{"start":{"line":1,"column":3,"offset":2},"end":{"line":1,"column":13,"offset":12},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":13,"offset":12},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's suppose you're creating a sign in form with two fields, ","position":{"start":{"line":3,"column":1,"offset":14},"end":{"line":3,"column":63,"offset":76},"indent":[]}},{"type":"inlineCode","value":"email","position":{"start":{"line":3,"column":63,"offset":76},"end":{"line":3,"column":70,"offset":83},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":3,"column":70,"offset":83},"end":{"line":3,"column":75,"offset":88},"indent":[]}},{"type":"inlineCode","value":"password","position":{"start":{"line":3,"column":75,"offset":88},"end":{"line":3,"column":85,"offset":98},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":3,"column":85,"offset":98},"end":{"line":3,"column":86,"offset":99},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":14},"end":{"line":3,"column":86,"offset":99},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The first step after installing Unform is creating your custom Input component that will be used for every input in yout application.","position":{"start":{"line":5,"column":1,"offset":101},"end":{"line":5,"column":134,"offset":234},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":101},"end":{"line":5,"column":134,"offset":234},"indent":[]}},{"type":"code","lang":"jsx","meta":"title=components/Input.js lineNumbers=true","value":"import React, { useEffect, useRef } from 'react';\nimport { useField } from '@unform/core'\n\nexport default function Input({ name, ...rest }) {\n  const inputRef = useRef(null);\n  const { fieldName, defaultValue = '', registerField, error } = useField(name);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value',\n    });\n  }, [fieldName, registerField]);\n\n  return (\n    <input ref={inputRef} defaultValue={defaultValue} {...rest} />\n  );\n}","position":{"start":{"line":7,"column":1,"offset":236},"end":{"line":27,"column":4,"offset":787},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In the above example, we create an input component using the ","position":{"start":{"line":29,"column":1,"offset":789},"end":{"line":29,"column":62,"offset":850},"indent":[]}},{"type":"inlineCode","value":"useField","position":{"start":{"line":29,"column":62,"offset":850},"end":{"line":29,"column":72,"offset":860},"indent":[]}},{"type":"text","value":" hook exposed by Unform.","position":{"start":{"line":29,"column":72,"offset":860},"end":{"line":29,"column":96,"offset":884},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":789},"end":{"line":29,"column":96,"offset":884},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We also use the ","position":{"start":{"line":31,"column":1,"offset":886},"end":{"line":31,"column":17,"offset":902},"indent":[]}},{"type":"inlineCode","value":"useRef","position":{"start":{"line":31,"column":17,"offset":902},"end":{"line":31,"column":25,"offset":910},"indent":[]}},{"type":"text","value":" hook from React so Unform can access the input reference directly to get/set the input value.","position":{"start":{"line":31,"column":25,"offset":910},"end":{"line":31,"column":119,"offset":1004},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":886},"end":{"line":31,"column":119,"offset":1004},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The next step is creating our form:","position":{"start":{"line":33,"column":1,"offset":1006},"end":{"line":33,"column":36,"offset":1041},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1006},"end":{"line":33,"column":36,"offset":1041},"indent":[]}},{"type":"code","lang":"jsx","meta":"title=SignIn.js lineNumbers=true","value":"import React from 'react';\nimport { Form } from '@unform/web';\nimport Input from './components/Input';\n\nexport default function SignIn() {\n  function handleSubmit(data) {\n    console.log(data);\n    // { email: 'test@example.com', password: '123456' }\n  }\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Input name=\"email\" type=\"email\" />\n      <Input name=\"password\" type=\"password\" />\n\n      <button type=\"submit\">Sign in</button>\n    </Form>\n  );\n}","position":{"start":{"line":35,"column":1,"offset":1043},"end":{"line":55,"column":4,"offset":1543},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you're using React Native, proceed to ","position":{"start":{"line":57,"column":1,"offset":1545},"end":{"line":57,"column":42,"offset":1586},"indent":[]}},{"type":"link","title":null,"url":"/guides/react-native","children":[{"type":"text","value":"React Native guide","position":{"start":{"line":57,"column":43,"offset":1587},"end":{"line":57,"column":61,"offset":1605},"indent":[]}}],"position":{"start":{"line":57,"column":42,"offset":1586},"end":{"line":57,"column":84,"offset":1628},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":57,"column":84,"offset":1628},"end":{"line":57,"column":85,"offset":1629},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":1545},"end":{"line":57,"column":85,"offset":1629},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Live example","position":{"start":{"line":59,"column":4,"offset":1634},"end":{"line":59,"column":16,"offset":1646},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":1631},"end":{"line":59,"column":16,"offset":1646},"indent":[]}},{"type":"code","lang":"jsx","meta":"live=true","value":"import React from 'react';\nimport { useField } from '@unform/web';\nimport { Form } from '@unform/web';\n\nfunction Input({ name, ...rest }) {\n  const inputRef = useRef(null);\n  const { fieldName, defaultValue, registerField, error } = useField(name);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'target.value',\n    });\n  }, [fieldName, registerField]);\n\n  return (\n    <input ref={inputRef} defaultValue={defaultValue} {...rest} />\n  );\n}\n\nfunction SignIn() {\n  function handleSubmit(data) {\n    console.log(data);\n    // { email: 'test@example.com', password: '123456' }\n  }\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Input name=\"email\" type=\"email\" />\n      <Input name=\"password\" type=\"password\" />\n\n      <button type=\"submit\">Sign in</button>\n    </Form>\n  );\n}\n\nrender(<SignIn />)","position":{"start":{"line":61,"column":1,"offset":1648},"end":{"line":100,"column":4,"offset":2525},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":103,"column":1,"offset":2528},"end":{"line":103,"column":31,"offset":2558},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":103,"column":31,"offset":2558}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"basic-form\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"#basic-form\",\n    \"aria-label\": \"basic form permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Basic form\"), mdx(\"p\", null, \"Let's suppose you're creating a sign in form with two fields, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"email\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"password\"), \".\"), mdx(\"p\", null, \"The first step after installing Unform is creating your custom Input component that will be used for every input in yout application.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=components/Input.js lineNumbers=true\",\n    \"title\": \"components/Input.js\",\n    \"lineNumbers\": \"true\"\n  }), \"import React, { useEffect, useRef } from 'react';\\nimport { useField } from '@unform/core'\\n\\nexport default function Input({ name, ...rest }) {\\n  const inputRef = useRef(null);\\n  const { fieldName, defaultValue = '', registerField, error } = useField(name);\\n\\n  useEffect(() => {\\n    registerField({\\n      name: fieldName,\\n      ref: inputRef.current,\\n      path: 'value',\\n    });\\n  }, [fieldName, registerField]);\\n\\n  return (\\n    <input ref={inputRef} defaultValue={defaultValue} {...rest} />\\n  );\\n}\\n\")), mdx(\"p\", null, \"In the above example, we create an input component using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useField\"), \" hook exposed by Unform.\"), mdx(\"p\", null, \"We also use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useRef\"), \" hook from React so Unform can access the input reference directly to get/set the input value.\"), mdx(\"p\", null, \"The next step is creating our form:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=SignIn.js lineNumbers=true\",\n    \"title\": \"SignIn.js\",\n    \"lineNumbers\": \"true\"\n  }), \"import React from 'react';\\nimport { Form } from '@unform/web';\\nimport Input from './components/Input';\\n\\nexport default function SignIn() {\\n  function handleSubmit(data) {\\n    console.log(data);\\n    // { email: 'test@example.com', password: '123456' }\\n  }\\n\\n  return (\\n    <Form onSubmit={handleSubmit}>\\n      <Input name=\\\"email\\\" type=\\\"email\\\" />\\n      <Input name=\\\"password\\\" type=\\\"password\\\" />\\n\\n      <button type=\\\"submit\\\">Sign in</button>\\n    </Form>\\n  );\\n}\\n\")), mdx(\"p\", null, \"If you're using React Native, proceed to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/guides/react-native\"\n  }), \"React Native guide\"), \".\"), mdx(\"h2\", {\n    \"id\": \"live-example\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#live-example\",\n    \"aria-label\": \"live example permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Live example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }), \"import React from 'react';\\nimport { useField } from '@unform/web';\\nimport { Form } from '@unform/web';\\n\\nfunction Input({ name, ...rest }) {\\n  const inputRef = useRef(null);\\n  const { fieldName, defaultValue, registerField, error } = useField(name);\\n\\n  useEffect(() => {\\n    registerField({\\n      name: fieldName,\\n      ref: inputRef.current,\\n      path: 'target.value',\\n    });\\n  }, [fieldName, registerField]);\\n\\n  return (\\n    <input ref={inputRef} defaultValue={defaultValue} {...rest} />\\n  );\\n}\\n\\nfunction SignIn() {\\n  function handleSubmit(data) {\\n    console.log(data);\\n    // { email: 'test@example.com', password: '123456' }\\n  }\\n\\n  return (\\n    <Form onSubmit={handleSubmit}>\\n      <Input name=\\\"email\\\" type=\\\"email\\\" />\\n      <Input name=\\\"password\\\" type=\\\"password\\\" />\\n\\n      <button type=\\\"submit\\\">Sign in</button>\\n    </Form>\\n  );\\n}\\n\\nrender(<SignIn />)\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"basic-form\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h1\" {...{\n        \"href\": \"#basic-form\",\n        \"aria-label\": \"basic form permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Basic form`}</h1>\n    <p>{`Let's suppose you're creating a sign in form with two fields, `}<inlineCode parentName=\"p\">{`email`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`password`}</inlineCode>{`.`}</p>\n    <p>{`The first step after installing Unform is creating your custom Input component that will be used for every input in yout application.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"title=components/Input.js lineNumbers=true\",\n        \"title\": \"components/Input.js\",\n        \"lineNumbers\": \"true\"\n      }}>{`import React, { useEffect, useRef } from 'react';\nimport { useField } from '@unform/core'\n\nexport default function Input({ name, ...rest }) {\n  const inputRef = useRef(null);\n  const { fieldName, defaultValue = '', registerField, error } = useField(name);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value',\n    });\n  }, [fieldName, registerField]);\n\n  return (\n    <input ref={inputRef} defaultValue={defaultValue} {...rest} />\n  );\n}\n`}</code></pre>\n    <p>{`In the above example, we create an input component using the `}<inlineCode parentName=\"p\">{`useField`}</inlineCode>{` hook exposed by Unform.`}</p>\n    <p>{`We also use the `}<inlineCode parentName=\"p\">{`useRef`}</inlineCode>{` hook from React so Unform can access the input reference directly to get/set the input value.`}</p>\n    <p>{`The next step is creating our form:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"title=SignIn.js lineNumbers=true\",\n        \"title\": \"SignIn.js\",\n        \"lineNumbers\": \"true\"\n      }}>{`import React from 'react';\nimport { Form } from '@unform/web';\nimport Input from './components/Input';\n\nexport default function SignIn() {\n  function handleSubmit(data) {\n    console.log(data);\n    // { email: 'test@example.com', password: '123456' }\n  }\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Input name=\"email\" type=\"email\" />\n      <Input name=\"password\" type=\"password\" />\n\n      <button type=\"submit\">Sign in</button>\n    </Form>\n  );\n}\n`}</code></pre>\n    <p>{`If you're using React Native, proceed to `}<a parentName=\"p\" {...{\n        \"href\": \"/guides/react-native\"\n      }}>{`React Native guide`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"live-example\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#live-example\",\n        \"aria-label\": \"live example permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Live example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=true\",\n        \"live\": \"true\"\n      }}>{`import React from 'react';\nimport { useField } from '@unform/web';\nimport { Form } from '@unform/web';\n\nfunction Input({ name, ...rest }) {\n  const inputRef = useRef(null);\n  const { fieldName, defaultValue, registerField, error } = useField(name);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'target.value',\n    });\n  }, [fieldName, registerField]);\n\n  return (\n    <input ref={inputRef} defaultValue={defaultValue} {...rest} />\n  );\n}\n\nfunction SignIn() {\n  function handleSubmit(data) {\n    console.log(data);\n    // { email: 'test@example.com', password: '123456' }\n  }\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Input name=\"email\" type=\"email\" />\n      <Input name=\"password\" type=\"password\" />\n\n      <button type=\"submit\">Sign in</button>\n    </Form>\n  );\n}\n\nrender(<SignIn />)\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}