{"expireTime":9007200835732669000,"key":"gatsby-plugin-mdx-entire-payload-077714a6b39027f6e2c91f67af3e4e24-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Get/set field value","position":{"start":{"line":1,"column":3,"offset":2},"end":{"line":1,"column":22,"offset":21},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":22,"offset":21},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Unform provides an easy way to set or access input data using form reference.","position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":78,"offset":100},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":78,"offset":100},"indent":[]}},{"type":"code","lang":"jsx","meta":"lineNumbers=true","value":"export default function MyForm() {\n  const formRef = useRef(null);\n\n  function functionThatGetsData() {\n    // Get all data\n    const allData = formRef.current.getData();\n\n    // Get single field value\n    const name = formRef.current.getFieldValue('name');\n    const street = formRef.current.getFieldValue('address.street');\n\n    console.log(allData, name, street);\n  }\n\n  function functionThatSetsData() {\n    // Set all data\n    formRef.current.setData({\n      name: 'John Doe',\n      address: {\n        street: 'Some street',\n      },\n    });\n\n    // Set single field value\n    formRef.current.setFieldValue('name', 'John Doe');\n    formRef.current.setFieldValue('address.street', 'Some street');\n  }\n\n  return (\n    <Form ref={formRef}>\n      <Input name=\"name\" />\n\n      <Scope path=\"address\">\n        <Input name=\"street\" />\n        <Input name=\"number\" />\n      </Scope>\n    </Form>\n  );\n}","position":{"start":{"line":5,"column":1,"offset":102},"end":{"line":45,"column":4,"offset":1027},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":48,"column":1,"offset":1030},"end":{"line":48,"column":31,"offset":1060},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":48,"column":31,"offset":1060}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"getset-field-value\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"#getset-field-value\",\n    \"aria-label\": \"getset field value permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Get/set field value\"), mdx(\"p\", null, \"Unform provides an easy way to set or access input data using form reference.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"export default function MyForm() {\\n  const formRef = useRef(null);\\n\\n  function functionThatGetsData() {\\n    // Get all data\\n    const allData = formRef.current.getData();\\n\\n    // Get single field value\\n    const name = formRef.current.getFieldValue('name');\\n    const street = formRef.current.getFieldValue('address.street');\\n\\n    console.log(allData, name, street);\\n  }\\n\\n  function functionThatSetsData() {\\n    // Set all data\\n    formRef.current.setData({\\n      name: 'John Doe',\\n      address: {\\n        street: 'Some street',\\n      },\\n    });\\n\\n    // Set single field value\\n    formRef.current.setFieldValue('name', 'John Doe');\\n    formRef.current.setFieldValue('address.street', 'Some street');\\n  }\\n\\n  return (\\n    <Form ref={formRef}>\\n      <Input name=\\\"name\\\" />\\n\\n      <Scope path=\\\"address\\\">\\n        <Input name=\\\"street\\\" />\\n        <Input name=\\\"number\\\" />\\n      </Scope>\\n    </Form>\\n  );\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"getset-field-value\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h1\" {...{\n        \"href\": \"#getset-field-value\",\n        \"aria-label\": \"getset field value permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Get/set field value`}</h1>\n    <p>{`Unform provides an easy way to set or access input data using form reference.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"lineNumbers=true\",\n        \"lineNumbers\": \"true\"\n      }}>{`export default function MyForm() {\n  const formRef = useRef(null);\n\n  function functionThatGetsData() {\n    // Get all data\n    const allData = formRef.current.getData();\n\n    // Get single field value\n    const name = formRef.current.getFieldValue('name');\n    const street = formRef.current.getFieldValue('address.street');\n\n    console.log(allData, name, street);\n  }\n\n  function functionThatSetsData() {\n    // Set all data\n    formRef.current.setData({\n      name: 'John Doe',\n      address: {\n        street: 'Some street',\n      },\n    });\n\n    // Set single field value\n    formRef.current.setFieldValue('name', 'John Doe');\n    formRef.current.setFieldValue('address.street', 'Some street');\n  }\n\n  return (\n    <Form ref={formRef}>\n      <Input name=\"name\" />\n\n      <Scope path=\"address\">\n        <Input name=\"street\" />\n        <Input name=\"number\" />\n      </Scope>\n    </Form>\n  );\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}