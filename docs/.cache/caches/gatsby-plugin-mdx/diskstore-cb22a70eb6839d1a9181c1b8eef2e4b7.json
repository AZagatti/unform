{"expireTime":9007200835732670000,"key":"gatsby-plugin-mdx-entire-payload-01f5112df2daae008445ba365c304614-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Validation","position":{"start":{"line":1,"column":3,"offset":2},"end":{"line":1,"column":13,"offset":12},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":13,"offset":12},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Unform ","position":{"start":{"line":3,"column":1,"offset":14},"end":{"line":3,"column":8,"offset":21},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"does not includes validation by default","position":{"start":{"line":3,"column":10,"offset":23},"end":{"line":3,"column":49,"offset":62},"indent":[]}}],"position":{"start":{"line":3,"column":8,"offset":21},"end":{"line":3,"column":51,"offset":64},"indent":[]}},{"type":"text","value":", so you can choose the best library that fits for you.","position":{"start":{"line":3,"column":51,"offset":64},"end":{"line":3,"column":106,"offset":119},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":14},"end":{"line":3,"column":106,"offset":119},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's see an example using ","position":{"start":{"line":5,"column":1,"offset":121},"end":{"line":5,"column":28,"offset":148},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/jquense/yup","children":[{"type":"text","value":"Yup","position":{"start":{"line":5,"column":29,"offset":149},"end":{"line":5,"column":32,"offset":152},"indent":[]}}],"position":{"start":{"line":5,"column":28,"offset":148},"end":{"line":5,"column":65,"offset":185},"indent":[]}},{"type":"text","value":" to validate form fields.","position":{"start":{"line":5,"column":65,"offset":185},"end":{"line":5,"column":90,"offset":210},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":121},"end":{"line":5,"column":90,"offset":210},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Validation with Yup","position":{"start":{"line":7,"column":4,"offset":215},"end":{"line":7,"column":23,"offset":234},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":212},"end":{"line":7,"column":23,"offset":234},"indent":[]}},{"type":"code","lang":"jsx","meta":"lineNumbers=true","value":"import * as Yup from 'yup';\n\nexport default function SignIn() {\n  function handleSubmit(data) {\n    try {\n      const schema = Yup.object().shape({\n        email: Yup.string().email().required(),\n        password: Yup.string().min(6).required(),\n      });\n\n      await schema.validate(data, {\n        abortEarly: false,\n      });\n\n      // Validation passed\n      console.log(data);\n    } catch (err) {\n      if (err instanceof Yup.ValidationError) {\n        // Validation failed\n        console.log(err);\n      }\n    }\n  }\n\n  return (...);\n}","position":{"start":{"line":9,"column":1,"offset":236},"end":{"line":36,"column":4,"offset":806},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Displaying errors","position":{"start":{"line":38,"column":4,"offset":811},"end":{"line":38,"column":21,"offset":828},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":808},"end":{"line":38,"column":21,"offset":828},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Unform provides an easy way to set and get errors inside inputs:","position":{"start":{"line":40,"column":1,"offset":830},"end":{"line":40,"column":65,"offset":894},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":830},"end":{"line":40,"column":65,"offset":894},"indent":[]}},{"type":"code","lang":"jsx","meta":"title=SignIn.jsx lineNumbers=true","value":"import React, { useRef } from 'react';\nimport * as Yup from 'yup';\n\nexport default function SignIn() {\n  const formRef = useRef(null);\n\n  function handleSubmit(data) {\n    try {\n      const schema = Yup.object().shape({\n        email: Yup.string().email().required(),\n        password: Yup.string().min(6).required(),\n      });\n\n      await schema.validate(data, {\n        abortEarly: false,\n      });\n\n      // Validation passed\n      console.log(data);\n    } catch (err) {\n      const validationErrors = {};\n\n      if (err instanceof Yup.ValidationError) {\n        err.inner.forEach(error => {\n          validationErrors[error.path] = error.message;\n        });\n\n        formRef.current.setErrors(validationErrors);\n      }\n    }\n  }\n\n  return (\n    <Form ref={formRef} onSubmit={handleSubmit}>\n      ...\n    </Form>\n  )\n}","position":{"start":{"line":42,"column":1,"offset":896},"end":{"line":81,"column":4,"offset":1765},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"And inside the input component you need to get ","position":{"start":{"line":83,"column":1,"offset":1767},"end":{"line":83,"column":48,"offset":1814},"indent":[]}},{"type":"inlineCode","value":"error","position":{"start":{"line":83,"column":48,"offset":1814},"end":{"line":83,"column":55,"offset":1821},"indent":[]}},{"type":"text","value":" from ","position":{"start":{"line":83,"column":55,"offset":1821},"end":{"line":83,"column":61,"offset":1827},"indent":[]}},{"type":"inlineCode","value":"useField","position":{"start":{"line":83,"column":61,"offset":1827},"end":{"line":83,"column":71,"offset":1837},"indent":[]}},{"type":"text","value":" and display it.","position":{"start":{"line":83,"column":71,"offset":1837},"end":{"line":83,"column":87,"offset":1853},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":1767},"end":{"line":83,"column":87,"offset":1853},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can also use the error message to add new class or styles to input.","position":{"start":{"line":85,"column":1,"offset":1855},"end":{"line":85,"column":72,"offset":1926},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":1855},"end":{"line":85,"column":72,"offset":1926},"indent":[]}},{"type":"code","lang":"jsx","meta":"title=components/Input.js lineNumbers=true","value":"export default function Input({ name, ...rest }) {\n  const inputRef = useRef(null);\n  const { fieldName, defaultValue, registerField, error } = useField(name);\n\n  useEffect(...); // Same useEffect from basic form example\n\n  return (\n    <>\n      <input\n        ref={inputRef}\n        defaultValue={defaultValue}\n        className={error ? 'has-error' : ''}\n        {...rest}\n      />\n\n      { error && <span className=\"error\">{error}</span> }\n    </>\n  );\n}","position":{"start":{"line":87,"column":1,"offset":1928},"end":{"line":107,"column":4,"offset":2439},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":110,"column":1,"offset":2442},"end":{"line":110,"column":31,"offset":2472},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":110,"column":31,"offset":2472}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"validation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"#validation\",\n    \"aria-label\": \"validation permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Validation\"), mdx(\"p\", null, \"Unform \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"does not includes validation by default\"), \", so you can choose the best library that fits for you.\"), mdx(\"p\", null, \"Let's see an example using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/jquense/yup\"\n  }), \"Yup\"), \" to validate form fields.\"), mdx(\"h2\", {\n    \"id\": \"validation-with-yup\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#validation-with-yup\",\n    \"aria-label\": \"validation with yup permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Validation with Yup\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"import * as Yup from 'yup';\\n\\nexport default function SignIn() {\\n  function handleSubmit(data) {\\n    try {\\n      const schema = Yup.object().shape({\\n        email: Yup.string().email().required(),\\n        password: Yup.string().min(6).required(),\\n      });\\n\\n      await schema.validate(data, {\\n        abortEarly: false,\\n      });\\n\\n      // Validation passed\\n      console.log(data);\\n    } catch (err) {\\n      if (err instanceof Yup.ValidationError) {\\n        // Validation failed\\n        console.log(err);\\n      }\\n    }\\n  }\\n\\n  return (...);\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"displaying-errors\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#displaying-errors\",\n    \"aria-label\": \"displaying errors permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Displaying errors\"), mdx(\"p\", null, \"Unform provides an easy way to set and get errors inside inputs:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=SignIn.jsx lineNumbers=true\",\n    \"title\": \"SignIn.jsx\",\n    \"lineNumbers\": \"true\"\n  }), \"import React, { useRef } from 'react';\\nimport * as Yup from 'yup';\\n\\nexport default function SignIn() {\\n  const formRef = useRef(null);\\n\\n  function handleSubmit(data) {\\n    try {\\n      const schema = Yup.object().shape({\\n        email: Yup.string().email().required(),\\n        password: Yup.string().min(6).required(),\\n      });\\n\\n      await schema.validate(data, {\\n        abortEarly: false,\\n      });\\n\\n      // Validation passed\\n      console.log(data);\\n    } catch (err) {\\n      const validationErrors = {};\\n\\n      if (err instanceof Yup.ValidationError) {\\n        err.inner.forEach(error => {\\n          validationErrors[error.path] = error.message;\\n        });\\n\\n        formRef.current.setErrors(validationErrors);\\n      }\\n    }\\n  }\\n\\n  return (\\n    <Form ref={formRef} onSubmit={handleSubmit}>\\n      ...\\n    </Form>\\n  )\\n}\\n\")), mdx(\"p\", null, \"And inside the input component you need to get \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"error\"), \" from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useField\"), \" and display it.\"), mdx(\"p\", null, \"You can also use the error message to add new class or styles to input.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=components/Input.js lineNumbers=true\",\n    \"title\": \"components/Input.js\",\n    \"lineNumbers\": \"true\"\n  }), \"export default function Input({ name, ...rest }) {\\n  const inputRef = useRef(null);\\n  const { fieldName, defaultValue, registerField, error } = useField(name);\\n\\n  useEffect(...); // Same useEffect from basic form example\\n\\n  return (\\n    <>\\n      <input\\n        ref={inputRef}\\n        defaultValue={defaultValue}\\n        className={error ? 'has-error' : ''}\\n        {...rest}\\n      />\\n\\n      { error && <span className=\\\"error\\\">{error}</span> }\\n    </>\\n  );\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"validation\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h1\" {...{\n        \"href\": \"#validation\",\n        \"aria-label\": \"validation permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Validation`}</h1>\n    <p>{`Unform `}<strong parentName=\"p\">{`does not includes validation by default`}</strong>{`, so you can choose the best library that fits for you.`}</p>\n    <p>{`Let's see an example using `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/jquense/yup\"\n      }}>{`Yup`}</a>{` to validate form fields.`}</p>\n    <h2 {...{\n      \"id\": \"validation-with-yup\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#validation-with-yup\",\n        \"aria-label\": \"validation with yup permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Validation with Yup`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"lineNumbers=true\",\n        \"lineNumbers\": \"true\"\n      }}>{`import * as Yup from 'yup';\n\nexport default function SignIn() {\n  function handleSubmit(data) {\n    try {\n      const schema = Yup.object().shape({\n        email: Yup.string().email().required(),\n        password: Yup.string().min(6).required(),\n      });\n\n      await schema.validate(data, {\n        abortEarly: false,\n      });\n\n      // Validation passed\n      console.log(data);\n    } catch (err) {\n      if (err instanceof Yup.ValidationError) {\n        // Validation failed\n        console.log(err);\n      }\n    }\n  }\n\n  return (...);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"displaying-errors\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#displaying-errors\",\n        \"aria-label\": \"displaying errors permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Displaying errors`}</h2>\n    <p>{`Unform provides an easy way to set and get errors inside inputs:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"title=SignIn.jsx lineNumbers=true\",\n        \"title\": \"SignIn.jsx\",\n        \"lineNumbers\": \"true\"\n      }}>{`import React, { useRef } from 'react';\nimport * as Yup from 'yup';\n\nexport default function SignIn() {\n  const formRef = useRef(null);\n\n  function handleSubmit(data) {\n    try {\n      const schema = Yup.object().shape({\n        email: Yup.string().email().required(),\n        password: Yup.string().min(6).required(),\n      });\n\n      await schema.validate(data, {\n        abortEarly: false,\n      });\n\n      // Validation passed\n      console.log(data);\n    } catch (err) {\n      const validationErrors = {};\n\n      if (err instanceof Yup.ValidationError) {\n        err.inner.forEach(error => {\n          validationErrors[error.path] = error.message;\n        });\n\n        formRef.current.setErrors(validationErrors);\n      }\n    }\n  }\n\n  return (\n    <Form ref={formRef} onSubmit={handleSubmit}>\n      ...\n    </Form>\n  )\n}\n`}</code></pre>\n    <p>{`And inside the input component you need to get `}<inlineCode parentName=\"p\">{`error`}</inlineCode>{` from `}<inlineCode parentName=\"p\">{`useField`}</inlineCode>{` and display it.`}</p>\n    <p>{`You can also use the error message to add new class or styles to input.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"title=components/Input.js lineNumbers=true\",\n        \"title\": \"components/Input.js\",\n        \"lineNumbers\": \"true\"\n      }}>{`export default function Input({ name, ...rest }) {\n  const inputRef = useRef(null);\n  const { fieldName, defaultValue, registerField, error } = useField(name);\n\n  useEffect(...); // Same useEffect from basic form example\n\n  return (\n    <>\n      <input\n        ref={inputRef}\n        defaultValue={defaultValue}\n        className={error ? 'has-error' : ''}\n        {...rest}\n      />\n\n      { error && <span className=\"error\">{error}</span> }\n    </>\n  );\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}