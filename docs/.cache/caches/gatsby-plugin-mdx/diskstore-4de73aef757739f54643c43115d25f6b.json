{"expireTime":9007200835732669000,"key":"gatsby-plugin-mdx-entire-payload-7297fc17663e99f83fd76c8d1311bc9b-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Usage with TypeScript","position":{"start":{"line":1,"column":3,"offset":2},"end":{"line":1,"column":24,"offset":23},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":24,"offset":23},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Unform exposes all type definitions from within it's packages, so it's not necessary to install ","position":{"start":{"line":3,"column":1,"offset":25},"end":{"line":3,"column":97,"offset":121},"indent":[]}},{"type":"inlineCode","value":"@types","position":{"start":{"line":3,"column":97,"offset":121},"end":{"line":3,"column":105,"offset":129},"indent":[]}},{"type":"text","value":" dependencies.","position":{"start":{"line":3,"column":105,"offset":129},"end":{"line":3,"column":119,"offset":143},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":25},"end":{"line":3,"column":119,"offset":143},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Form with TypeScript","position":{"start":{"line":5,"column":4,"offset":148},"end":{"line":5,"column":24,"offset":168},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":145},"end":{"line":5,"column":24,"offset":168},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When creating a form component using Unform and TypeScript, there are two main points to remember:","position":{"start":{"line":7,"column":1,"offset":170},"end":{"line":7,"column":99,"offset":268},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":170},"end":{"line":7,"column":99,"offset":268},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":9,"column":3,"offset":272},"end":{"line":9,"column":7,"offset":276},"indent":[]}},{"type":"inlineCode","value":"onSubmit","position":{"start":{"line":9,"column":7,"offset":276},"end":{"line":9,"column":17,"offset":286},"indent":[]}},{"type":"text","value":" function can be typed using ","position":{"start":{"line":9,"column":17,"offset":286},"end":{"line":9,"column":46,"offset":315},"indent":[]}},{"type":"inlineCode","value":"SubmitHandler<FormData>","position":{"start":{"line":9,"column":46,"offset":315},"end":{"line":9,"column":71,"offset":340},"indent":[]}},{"type":"text","value":" where ","position":{"start":{"line":9,"column":71,"offset":340},"end":{"line":9,"column":78,"offset":347},"indent":[]}},{"type":"inlineCode","value":"FormData","position":{"start":{"line":9,"column":78,"offset":347},"end":{"line":9,"column":88,"offset":357},"indent":[]}},{"type":"text","value":" is the format of data inputted by user;","position":{"start":{"line":9,"column":88,"offset":357},"end":{"line":9,"column":128,"offset":397},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":272},"end":{"line":9,"column":128,"offset":397},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":270},"end":{"line":9,"column":128,"offset":397},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If you're using ","position":{"start":{"line":10,"column":3,"offset":400},"end":{"line":10,"column":19,"offset":416},"indent":[]}},{"type":"inlineCode","value":"useRef","position":{"start":{"line":10,"column":19,"offset":416},"end":{"line":10,"column":27,"offset":424},"indent":[]}},{"type":"text","value":" to access form reference, remember to add ","position":{"start":{"line":10,"column":27,"offset":424},"end":{"line":10,"column":70,"offset":467},"indent":[]}},{"type":"inlineCode","value":"FormHandles","position":{"start":{"line":10,"column":70,"offset":467},"end":{"line":10,"column":83,"offset":480},"indent":[]}},{"type":"text","value":" as type parameter to it;","position":{"start":{"line":10,"column":83,"offset":480},"end":{"line":10,"column":108,"offset":505},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":400},"end":{"line":10,"column":108,"offset":505},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":398},"end":{"line":10,"column":108,"offset":505},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":270},"end":{"line":10,"column":108,"offset":505},"indent":[1]}},{"type":"jsx","value":"<br />","position":{"start":{"line":12,"column":1,"offset":507},"end":{"line":12,"column":7,"offset":513},"indent":[]}},{"type":"code","lang":"tsx","meta":"lineNumbers=true","value":"import React, { useRef } from 'react';\nimport { SubmitHandler, FormHandles } from '@unform/core';\nimport { Form } from '@unform/web';\nimport Input from './components/Input';\n\ninterface FormData {\n  name: string;\n  email: string;\n};\n\nconst MyForm: React.FC = () => {\n  const formRef = useRef<FormHandles>(null);\n\n  const handleSubmit: SubmitHandler<FormData> = (data) => {\n    console.log(formRef);\n  };\n\n  return (\n    <Form ref={formRef} onSubmit={handleSubmit}>\n      <Input name=\"name\" />\n      <Input name=\"email\" />\n    </Form>\n  )\n};\n\nexport default MyForm;","position":{"start":{"line":14,"column":1,"offset":515},"end":{"line":41,"column":4,"offset":1106},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Simple input","position":{"start":{"line":43,"column":4,"offset":1111},"end":{"line":43,"column":16,"offset":1123},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1108},"end":{"line":43,"column":16,"offset":1123},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When creating a simple HTML input or any other HTML element used for input source, remember to always extend the element props. In web you can always use the ","position":{"start":{"line":45,"column":1,"offset":1125},"end":{"line":45,"column":159,"offset":1283},"indent":[]}},{"type":"inlineCode","value":"JSX.IntrinsicElements['element']","position":{"start":{"line":45,"column":159,"offset":1283},"end":{"line":45,"column":193,"offset":1317},"indent":[]}},{"type":"text","value":" to get the props adapted to JSX.","position":{"start":{"line":45,"column":193,"offset":1317},"end":{"line":45,"column":226,"offset":1350},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1125},"end":{"line":45,"column":226,"offset":1350},"indent":[]}},{"type":"jsx","value":"<blockquote>\n<p>In React Native you can import default component props directly from `react-native` package, for exaple:</p>","position":{"start":{"line":47,"column":1,"offset":1352},"end":{"line":48,"column":112,"offset":1476},"indent":[1]}},{"type":"code","lang":"jsx","meta":null,"value":"import { TextInputProps } from 'react-native'`","position":{"start":{"line":50,"column":1,"offset":1478},"end":{"line":52,"column":4,"offset":1535},"indent":[1,1]}},{"type":"jsx","value":"</blockquote>","position":{"start":{"line":53,"column":1,"offset":1536},"end":{"line":53,"column":14,"offset":1549},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Also, in web (ReactJS) rembember to reference the global element inside ","position":{"start":{"line":55,"column":1,"offset":1551},"end":{"line":55,"column":73,"offset":1623},"indent":[]}},{"type":"inlineCode","value":"useRef","position":{"start":{"line":55,"column":73,"offset":1623},"end":{"line":55,"column":81,"offset":1631},"indent":[]}},{"type":"text","value":" hook and ","position":{"start":{"line":55,"column":81,"offset":1631},"end":{"line":55,"column":91,"offset":1641},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"always","position":{"start":{"line":55,"column":93,"offset":1643},"end":{"line":55,"column":99,"offset":1649},"indent":[]}}],"position":{"start":{"line":55,"column":91,"offset":1641},"end":{"line":55,"column":101,"offset":1651},"indent":[]}},{"type":"text","value":" set the default value to ","position":{"start":{"line":55,"column":101,"offset":1651},"end":{"line":55,"column":127,"offset":1677},"indent":[]}},{"type":"inlineCode","value":"null","position":{"start":{"line":55,"column":127,"offset":1677},"end":{"line":55,"column":133,"offset":1683},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":55,"column":133,"offset":1683},"end":{"line":55,"column":134,"offset":1684},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":1551},"end":{"line":55,"column":134,"offset":1684},"indent":[]}},{"type":"code","lang":"jsx","meta":"lineNumbers=true","value":"import React, { useEffect, useRef } from 'react';\nimport { useField } from '@unform/core';\n\nimport { Container } from './styles';\n\ninterface Props {\n  name: string;\n  label?: string;\n};\n\ntype InputProps = JSX.IntrinsicElements['input'] & Props;\n\nconst Input: React.FC<InputProps> = ({ name, label, ...rest }) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const { fieldName, defaultValue, registerField, error } = useField(name);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      path: 'value',\n      ref: inputRef.current,\n    })\n  }, [fieldName, registerField]);\n\n  return (\n    <>\n      { label && <label htmlFor={fieldName}>{label}</label> }\n\n      <input\n        id={fieldName}\n        ref={inputRef}\n        defaultValue={defaultValue}\n        {...rest}\n      />\n\n      { error && <span>{error}</span> }\n    </>\n  );\n};\n\nexport default Input;","position":{"start":{"line":57,"column":1,"offset":1686},"end":{"line":100,"column":4,"offset":2594},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":103,"column":1,"offset":2597},"end":{"line":103,"column":31,"offset":2627},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":103,"column":31,"offset":2627}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"usage-with-typescript\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"#usage-with-typescript\",\n    \"aria-label\": \"usage with typescript permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Usage with TypeScript\"), mdx(\"p\", null, \"Unform exposes all type definitions from within it's packages, so it's not necessary to install \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@types\"), \" dependencies.\"), mdx(\"h2\", {\n    \"id\": \"form-with-typescript\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#form-with-typescript\",\n    \"aria-label\": \"form with typescript permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Form with TypeScript\"), mdx(\"p\", null, \"When creating a form component using Unform and TypeScript, there are two main points to remember:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onSubmit\"), \" function can be typed using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SubmitHandler<FormData>\"), \" where \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FormData\"), \" is the format of data inputted by user;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If you're using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"useRef\"), \" to access form reference, remember to add \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FormHandles\"), \" as type parameter to it;\")), mdx(\"br\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"import React, { useRef } from 'react';\\nimport { SubmitHandler, FormHandles } from '@unform/core';\\nimport { Form } from '@unform/web';\\nimport Input from './components/Input';\\n\\ninterface FormData {\\n  name: string;\\n  email: string;\\n};\\n\\nconst MyForm: React.FC = () => {\\n  const formRef = useRef<FormHandles>(null);\\n\\n  const handleSubmit: SubmitHandler<FormData> = (data) => {\\n    console.log(formRef);\\n  };\\n\\n  return (\\n    <Form ref={formRef} onSubmit={handleSubmit}>\\n      <Input name=\\\"name\\\" />\\n      <Input name=\\\"email\\\" />\\n    </Form>\\n  )\\n};\\n\\nexport default MyForm;\\n\")), mdx(\"h2\", {\n    \"id\": \"simple-input\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#simple-input\",\n    \"aria-label\": \"simple input permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Simple input\"), mdx(\"p\", null, \"When creating a simple HTML input or any other HTML element used for input source, remember to always extend the element props. In web you can always use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JSX.IntrinsicElements['element']\"), \" to get the props adapted to JSX.\"), mdx(\"blockquote\", null, mdx(\"p\", null, \"In React Native you can import default component props directly from `react-native` package, for exaple:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import { TextInputProps } from 'react-native'`\\n\"))), mdx(\"p\", null, \"Also, in web (ReactJS) rembember to reference the global element inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useRef\"), \" hook and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"always\"), \" set the default value to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"import React, { useEffect, useRef } from 'react';\\nimport { useField } from '@unform/core';\\n\\nimport { Container } from './styles';\\n\\ninterface Props {\\n  name: string;\\n  label?: string;\\n};\\n\\ntype InputProps = JSX.IntrinsicElements['input'] & Props;\\n\\nconst Input: React.FC<InputProps> = ({ name, label, ...rest }) => {\\n  const inputRef = useRef<HTMLInputElement>(null);\\n\\n  const { fieldName, defaultValue, registerField, error } = useField(name);\\n\\n  useEffect(() => {\\n    registerField({\\n      name: fieldName,\\n      path: 'value',\\n      ref: inputRef.current,\\n    })\\n  }, [fieldName, registerField]);\\n\\n  return (\\n    <>\\n      { label && <label htmlFor={fieldName}>{label}</label> }\\n\\n      <input\\n        id={fieldName}\\n        ref={inputRef}\\n        defaultValue={defaultValue}\\n        {...rest}\\n      />\\n\\n      { error && <span>{error}</span> }\\n    </>\\n  );\\n};\\n\\nexport default Input;\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"usage-with-typescript\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h1\" {...{\n        \"href\": \"#usage-with-typescript\",\n        \"aria-label\": \"usage with typescript permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Usage with TypeScript`}</h1>\n    <p>{`Unform exposes all type definitions from within it's packages, so it's not necessary to install `}<inlineCode parentName=\"p\">{`@types`}</inlineCode>{` dependencies.`}</p>\n    <h2 {...{\n      \"id\": \"form-with-typescript\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#form-with-typescript\",\n        \"aria-label\": \"form with typescript permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Form with TypeScript`}</h2>\n    <p>{`When creating a form component using Unform and TypeScript, there are two main points to remember:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`onSubmit`}</inlineCode>{` function can be typed using `}<inlineCode parentName=\"li\">{`SubmitHandler<FormData>`}</inlineCode>{` where `}<inlineCode parentName=\"li\">{`FormData`}</inlineCode>{` is the format of data inputted by user;`}</li>\n      <li parentName=\"ul\">{`If you're using `}<inlineCode parentName=\"li\">{`useRef`}</inlineCode>{` to access form reference, remember to add `}<inlineCode parentName=\"li\">{`FormHandles`}</inlineCode>{` as type parameter to it;`}</li>\n    </ul>\n    <br />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"lineNumbers=true\",\n        \"lineNumbers\": \"true\"\n      }}>{`import React, { useRef } from 'react';\nimport { SubmitHandler, FormHandles } from '@unform/core';\nimport { Form } from '@unform/web';\nimport Input from './components/Input';\n\ninterface FormData {\n  name: string;\n  email: string;\n};\n\nconst MyForm: React.FC = () => {\n  const formRef = useRef<FormHandles>(null);\n\n  const handleSubmit: SubmitHandler<FormData> = (data) => {\n    console.log(formRef);\n  };\n\n  return (\n    <Form ref={formRef} onSubmit={handleSubmit}>\n      <Input name=\"name\" />\n      <Input name=\"email\" />\n    </Form>\n  )\n};\n\nexport default MyForm;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"simple-input\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#simple-input\",\n        \"aria-label\": \"simple input permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Simple input`}</h2>\n    <p>{`When creating a simple HTML input or any other HTML element used for input source, remember to always extend the element props. In web you can always use the `}<inlineCode parentName=\"p\">{`JSX.IntrinsicElements['element']`}</inlineCode>{` to get the props adapted to JSX.`}</p>\n    <blockquote>\n      <p>In React Native you can import default component props directly from `react-native` package, for exaple:</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\"\n        }}>{`import { TextInputProps } from 'react-native'\\`\n`}</code></pre>\n    </blockquote>\n    <p>{`Also, in web (ReactJS) rembember to reference the global element inside `}<inlineCode parentName=\"p\">{`useRef`}</inlineCode>{` hook and `}<strong parentName=\"p\">{`always`}</strong>{` set the default value to `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"lineNumbers=true\",\n        \"lineNumbers\": \"true\"\n      }}>{`import React, { useEffect, useRef } from 'react';\nimport { useField } from '@unform/core';\n\nimport { Container } from './styles';\n\ninterface Props {\n  name: string;\n  label?: string;\n};\n\ntype InputProps = JSX.IntrinsicElements['input'] & Props;\n\nconst Input: React.FC<InputProps> = ({ name, label, ...rest }) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const { fieldName, defaultValue, registerField, error } = useField(name);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      path: 'value',\n      ref: inputRef.current,\n    })\n  }, [fieldName, registerField]);\n\n  return (\n    <>\n      { label && <label htmlFor={fieldName}>{label}</label> }\n\n      <input\n        id={fieldName}\n        ref={inputRef}\n        defaultValue={defaultValue}\n        {...rest}\n      />\n\n      { error && <span>{error}</span> }\n    </>\n  );\n};\n\nexport default Input;\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}