{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/guides/react-native/","result":{"data":{"mdx":{"id":"80c5ad91-9e0d-5b58-ad69-d69ce02d200a","excerpt":"The Unform API is almost identic between web and mobile, below you can see an example of an Input and a Form using Unform and React Native. Input component Inâ€¦","fields":{"slug":"/guides/react-native/"},"frontmatter":{"title":"React Native","description":null,"image":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"React Native\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The Unform API is almost identic between web and mobile, below you can see an example of an Input and a Form using Unform and React Native.\"), mdx(\"h2\", {\n    \"id\": \"input-component\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#input-component\",\n    \"aria-label\": \"input component permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Input component\"), mdx(\"p\", null, \"In React Native we need to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TextInput\"), \" provided by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-native\"), \" package.\"), mdx(\"p\", null, \"Also, to keep the field uncontrolled, that is, don't store it's value within a state, we need to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_lastNativeText\"), \" to get the field value and use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setNativeProps\"), \" to set the value within native renderer.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=Input.js lineNumbers=true\",\n    \"title\": \"Input.js\",\n    \"lineNumbers\": \"true\"\n  }), \"import React, { useRef, useEffect } from 'react';\\nimport { Text, TextInput } from 'react-native';\\nimport { useField } from '@unform/core';\\n\\nfunction Input({ name, label, ...rest }) {\\n  const inputRef = useRef(null);\\n  const { fieldName, registerField, defaultValue = '', error } = useField(name);\\n\\n  useEffect(() => {\\n    registerField({\\n      name: fieldName,\\n      ref: inputRef.current,\\n      path: '_lastNativeText',\\n      getValue(ref) {\\n        return ref._lastNativeText || '';\\n      },\\n      setValue(ref, value) {\\n        ref.setNativeProps({ text: value });\\n        ref._lastNativeText = value;\\n      },\\n      clearValue(ref) {\\n        ref.setNativeProps({ text: '' });\\n        ref._lastNativeText = '';\\n      },\\n    });\\n  }, [fieldName, registerField]);\\n\\n  return (\\n    <>\\n      {label && <Text>{label}</Text>}\\n\\n      <TextInput ref={inputRef} defaultValue={defaultValue} {...rest} />\\n    </>\\n  );\\n}\\n\\nexport default Input;\\n\")), mdx(\"h2\", {\n    \"id\": \"form-component\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#form-component\",\n    \"aria-label\": \"form component permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Form component\"), mdx(\"p\", null, \"The only difference between the web form is that in React Native we don't have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<button type\\\"submit\\\" />\"), \", so the form submit must be triggered manually.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=SignIn.js lineNumbers=true\",\n    \"title\": \"SignIn.js\",\n    \"lineNumbers\": \"true\"\n  }), \"import React, { useRef } from 'react';\\nimport { Button } from 'react-native';\\nimport { Form } from '@unform/mobile';\\nimport Input from './components/Input';\\n\\nexport default function SignIn() {\\n  const formRef = useRef(null);\\n\\n  function handleSubmit(data) {\\n    console.log(data);\\n    // { email: 'test@example.com', password: '123456' }\\n  }\\n\\n  return (\\n    <Form ref={formRef} onSubmit={handleSubmit}>\\n      <Input name=\\\"email\\\" type=\\\"email\\\" />\\n      <Input name=\\\"password\\\" type=\\\"password\\\" />\\n\\n      <Button title=\\\"Sign in\\\" onPress={formRef.current.submitForm} />\\n    </Form>\\n  );\\n}\\n\")), mdx(\"p\", null, \"Unform exposes a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"submitForm\"), \" function within form reference, so calling it will trigger \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onSubmit\"), \" prop passing all the field data to it.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/guides/react-native/","prev":{"id":"cc01e5d2-2969-556c-8474-d83f239c92eb","fields":{"slug":"/guides/reset-form/"},"frontmatter":{"title":"Reset form"}},"next":{"id":"31513513-962e-589a-800c-6bc204fea8a7","fields":{"slug":"/guides/manual-form-submit/"},"frontmatter":{"title":"Manual form submit"}}}}}