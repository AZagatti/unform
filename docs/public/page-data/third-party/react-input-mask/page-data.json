{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/third-party/react-input-mask/","result":{"data":{"mdx":{"id":"fee66141-0bd4-554b-9a93-5166424b6582","excerpt":"React Input Mask  offers an easy way to add masks to inputs. ⚠️ All examples below are using  TypeScript , if you're not using it you can simply remove all type…","fields":{"slug":"/third-party/react-input-mask/"},"frontmatter":{"title":"React Input Mask","description":null,"image":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"React Input Mask\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/sanniassin/react-input-mask\"\n  }), \"React Input Mask\"), \" offers an easy way to add masks to inputs.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u26A0\\uFE0F All examples below are using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TypeScript\"), \", if you're not using it you can simply remove all type definitions as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.FC<Props>\"), \" from component definition.\")), mdx(\"h2\", {\n    \"id\": \"example\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#example\",\n    \"aria-label\": \"example permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"import React, { useRef, useEffect } from 'react';\\nimport ReactInputMask, { Props as InputProps } from 'react-input-mask';\\n\\nimport { useField } from '@unform/core';\\n\\nimport 'react-datepicker/dist/react-datepicker.css';\\n\\ninterface Props extends InputProps {\\n  name: string;\\n}\\n\\nconst InputMask: React.FC<Props> = ({ name, ...rest }) => {\\n  const inputRef = useRef(null);\\n  const { fieldName, registerField, defaultValue, error } = useField(name);\\n\\n  useEffect(() => {\\n    registerField({\\n      name: fieldName,\\n      ref: inputRef.current,\\n      path: 'value',\\n      setValue(ref: any, value: string) {\\n        ref.setInputValue('');\\n      },\\n      clearValue(ref: any) {\\n        ref.setInputValue('');\\n      },\\n    });\\n  }, [fieldName, registerField]);\\n\\n  return (\\n    <ReactInputMask ref={inputRef} defaultValue={defaultValue} {...rest} />\\n  );\\n};\\n\\nexport default InputMask;\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/third-party/react-input-mask/","prev":{"id":"7337fee8-7a14-59ed-b194-26a92ce8de27","fields":{"slug":"/third-party/react-datepicker/"},"frontmatter":{"title":"React DatePicker"}},"next":{"id":"dd3688a7-a493-5cd5-9e2f-b3ae084cd8f3","fields":{"slug":"/why-unform/"},"frontmatter":{"title":"Why Unform?"}}}}}