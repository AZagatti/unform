{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/recipes/handling-file-inputs/","result":{"data":{"mdx":{"id":"44eb7e15-fe61-58de-9f92-0e510ae60919","excerpt":"Handling file inputs Unform API can deal with any type of input source. This example demonstrates how, event file inputs, can be used as fields inside Unform.","fields":{"slug":"/recipes/handling-file-inputs/"},"frontmatter":{"title":"","description":null,"image":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"handling-file-inputs\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"#handling-file-inputs\",\n    \"aria-label\": \"handling file inputs permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Handling file inputs\"), mdx(\"p\", null, \"Unform API can deal with any type of input source.\"), mdx(\"p\", null, \"This example demonstrates how, event file inputs, can be used as fields inside Unform.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=components/SingleFileInput.js lineNumbers=true\",\n    \"title\": \"components/SingleFileInput.js\",\n    \"lineNumbers\": \"true\"\n  }), \"import React, { useRef, useState } from 'react';\\nimport { useField } from '@unform/core'\\n\\nexport default function SingleFileInput({ name, label, ...rest }) {\\n  const inputRef = useRef(null);\\n\\n  const {\\n    fieldName,\\n    defaultValue,\\n    registerField,\\n    error,\\n  } = useField(name);\\n\\n  useEffect(() => {\\n    registerField({\\n      name: fieldName,\\n      ref: inputRef.current,\\n      path: 'target.files[0]',\\n      clearValue(ref) {\\n        ref.value = '';\\n      }\\n    });\\n  }, [fieldName, registerField]);\\n\\n  return (\\n    <>\\n      <input\\n        type=\\\"file\\\"\\n        id={fieldName}\\n        ref={inputRef}\\n        defaultValue={defaultValue}\\n        {...rest}\\n      />\\n    </>\\n  );\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/recipes/handling-file-inputs/","prev":{"id":"abbc3216-ab28-5413-b8ff-b1d0d69dc98a","fields":{"slug":"/recipes/creating-your-own-inputs/"},"frontmatter":{"title":""}},"next":{"id":"97c48b86-6a55-5ac9-8bf6-9650b110d3ef","fields":{"slug":"/recipes/simple-input/"},"frontmatter":{"title":""}}}}}